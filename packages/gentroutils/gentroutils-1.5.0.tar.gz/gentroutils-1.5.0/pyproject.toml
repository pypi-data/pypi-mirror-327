[project]
authors = [{ name = "Szymon Szyszkowski", email = "ss60@sanger.ac.uk" }]
name = "gentroutils"
version = "1.5.0"
description = "Open Targets python genetics utility CLI tools"
dependencies = [
    "click>=8.1.7",
    "google-cloud-storage>=2.18.1",
    "pyfiglet>=1.0.2",
    "requests>=2.32.3",
    "great-expectations>=1.3.4",
]
readme = "README.md"
requires-python = ">=3.10,<3.13"
license = "Apache-2.0"
documentation = "https://github.com/opentargets/gentroutils"
repository = "https://github.com/opentargets/gentroutils"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Operating System :: Unix",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: Apache Software License",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[project.scripts]
gentroutils = "gentroutils:cli"

[dependency-groups]
dev = [
    "ruff>=0.5.6",
    "pytest>=8.3.2",
    "deptry>=0.19.0",
    "pre-commit>=3.8.0",
    "interrogate>=1.7.0",
    "isort>=5.13.2",
    "mypy>=1.11.1",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.1",
    "pytest-sugar>=1.0.0",
    "pydoclint>=0.5.6",
    "gcloud-storage-emulator>=0.5.0",
    "types-requests>=2.32.0.20240712",
    "pyftpdlib>=2.0.1",
    "python-semantic-release>=9.19.1",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/gentroutils"]

# test configuration
[tool.pytest.ini_options]
markers = ["integration_test", "unit_test"]
addopts = "-n0 --doctest-modules --cov=gentroutils --cov-report=xml -s -p no:warnings --cov-report term-missing --cov-fail-under=80"
pythonpath = ["src/"]
testpaths = ["tests/"]


[tool.ruff]
line-length = 130

# linting configuration
[tool.ruff.lint]
ignore = [
    "E501", # line too long
    "E731", # do not assign a lambda expression, use a def

    # Ignore ignored, as the rule is now back in preview/nursery, which cannot
    # be ignored anymore without warnings.
    # https://github.com/astral-sh/ruff/issues/7491
    # "PLC1901", # Lots of false positives

    # False positives https://github.com/astral-sh/ruff/issues/5386
    "PLC0208", # Use a sequence type instead of a `set` when iterating over values
    "PLR0911", # Too many return statements ({returns} > {max_returns})
    "PLR0912", # Too many branches ({branches} > {max_branches})
    "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
    "PLR0915", # Too many statements ({statements} > {max_statements})
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "PLW2901", # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    "UP006",   # keep type annotation style as is
    "UP007",   # keep type annotation style as is
    # Ignored due to performance: https://github.com/charliermarsh/ruff/issues/2923
    "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`

]

# add classifiers


[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"path/to/file.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pydoclint]
style = 'google'
exclude = '\.git|\.venv|__init__.py|tests|docs'
require-return-section-when-returning-nothing = false
check-return-types = true
allow-init-docstring = true
arg-type-hints-in-docstring = true
skip-checking-short-docstrings = true
check-class-attributes = false

[tool.interrogate]
fail-under = 95
color = true
exclude = ["dist"]
ignore-init-method = true
generate-badge = "."
badge-format = "svg"


# type checking configuration
[tool.mypy]
disallow_any_generics = true
disallow_incomplete_defs = true
no_implicit_optional = true
no_implicit_reexport = true
warn_no_return = false
strict_equality = true
warn_redundant_casts = true
warn_unused_ignores = true
# plugins = ["returns.contrib.mypy.returns_plugin"]

[[tool.mypy.overrides]]
module = [
    "google.cloud",
    "pyfiglet",
    "click",
    "google.cloud.storage",
    "great_expectations",
]
ignore_missing_imports = true


[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
no_git_verify = true
tag_format = "v{version}"


[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.branches.dev]
match = "dev"
prerelease_token = "dev"
prerelease = true

[tool.semantic-release.changelog.default_templates]
changelog_file = "CHANGELOG.md"

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "docs", "style", "test", "ci"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

from typing import Optional, Union

from . import __version__
from .config import settings
from .http_client import _RequestsClient
from .models import FutureOutput, FutureOutputGroup, QCIOInputsOrList


class CCClient:
    """Main client object to perform computations using ChemCloud."""

    def __init__(
        self,
        *,
        chemcloud_username: Optional[str] = None,
        chemcloud_password: Optional[str] = None,
        profile: Optional[str] = None,
        chemcloud_domain: Optional[str] = None,
    ):
        """
        Initialize a CCClient object.

        Parameters:
            chemcloud_username: ChemCloud username
            chemcloud_password: ChemCloud password
            profile: Authentication profile name
            chemcloud_domain: Domain of ChemCloud instance to connect to

        !!! Danger
            It is not recommended to pass your ChemCloud username and
            password directly to a `CCClient`. Instead instantiate a client with no
            credentials `client = CCClient()` and then run `client.configure()` to
            securely set up your authentication credentials for ChemCloud.
        """
        self._client = _RequestsClient(
            chemcloud_username=chemcloud_username,
            chemcloud_password=chemcloud_password,
            profile=profile,
            chemcloud_domain=chemcloud_domain,
        )
        self._openapi_spec: Optional[dict] = None

    def __repr__(self) -> str:
        return (
            f"{type(self).__name__}({self._client._chemcloud_domain}, "
            f"profile={self.profile})"
        )

    def _set_openapi_specification(self):
        """Gets OpenAPI specification from ChemCloud Server"""
        self._openapi_spec = self._client._request(
            "get", "/openapi.json", api_call=False
        )

    @property
    def version(self) -> str:
        """Returns chemcloud client version"""
        return __version__

    @property
    def profile(self) -> str:
        """Profile being used for authentication with ChemCloud.

        Returns:
            The name of the credentials profile being used with the current client.
        """
        return self._client._profile

    @property
    def supported_programs(self) -> list[str]:
        """Compute programs currently supported by ChemCloud.

        Returns:
            List of programs currently supported by ChemCloud."""
        if not self._openapi_spec:
            self._set_openapi_specification()
        try:
            assert self._openapi_spec is not None
            programs = self._openapi_spec["components"]["schemas"]["SupportedPrograms"][
                "enum"
            ]
        except IndexError:
            print("Cannot locate currently supported programs.")
            programs = [""]
        return programs

    def hello_world(self, name: Optional[str] = None) -> str:
        """A simple endpoint to check connectivity to ChemCloud.

        Parameters:
            name: Your name

        Returns:
            A message from ChemCloud if the client was able to successfully
            connect.
        """
        return self._client.hello_world(name)

    def compute(
        self,
        program: str,
        inp_obj: QCIOInputsOrList,
        *,
        collect_stdout: bool = True,
        collect_files: bool = False,
        collect_wfn: bool = False,
        rm_scratch_dir: bool = True,
        propagate_wfn: bool = False,
        queue: Optional[str] = None,
    ) -> Union[FutureOutput, FutureOutputGroup]:
        """Submit a computation to ChemCloud.

        Parameters:
            program: A program name matching one of the `self.supported_programs`
            inp_obj: The input object to be used for the computation. This can be a
                single input object or a list of input objects.
            collect_stdout: Whether to collect stdout/stderr from the program as output.
                Failed computations will always collect stdout/stderr.
            collect_files: Collect all files generated by the QC program as output.
            collect_wfn: Collect the wavefunction file(s) from the calculation.
                Not every program will support this. Use collect_files to collect
                all files including the wavefunction.
            rm_scratch_dir: Delete the scratch directory after the program exits. Should
                only be set to False for debugging purposes.
            propagate_wfn: For any adapter performing a sequential task, such
                as a geometry optimization, propagate the wavefunction from the previous
                step to the next step. This is useful for accelerating convergence by
                using a previously computed wavefunction as a starting guess. This will
                be ignored if the adapter for a given qc program does not support it.
            queue: The name of a private compute queue. If None, default queue is used

        Returns:
            Object providing access to a computation's eventual result. You can check a
            computation's status by running `.status` on the `FutureOutput` object or
            `.get()` to block and retrieve the computation's final result.
        """
        if self.supported_programs is not None:
            assert (
                program in self.supported_programs
            ), f"Please use one of the following programs: {self.supported_programs}"

        compute_params = dict(
            program=program,
            collect_stdout=collect_stdout,
            collect_files=collect_files,
            collect_wfn=collect_wfn,
            rm_scratch_dir=rm_scratch_dir,
            propagate_wfn=propagate_wfn,
            queue=queue,
        )
        return self._client.compute(inp_obj, compute_params)

    def configure(self, profile: str = settings.chemcloud_credentials_profile) -> None:
        """Configure profiles for authentication with ChemCloud.

        Parameters:
            profile: Optional value to create a named profile for use with QC
                Cloud. No value needs to be passed and most users will only have one
                login with ChemCloud. CCClient will access the profile by
                default without a specific name being passed. Pass a value if you have
                multiple logins to ChemCloud.
        Note:
            Configures `chemcloud` to use the passed credentials automatically in the
            future. You will not need to run `.configure()` the next time you use the
            `chemcloud`.

        """
        print(
            "âœ… If you don't get have an account please signup at: "
            f"{self._client._chemcloud_domain}/signup"
        )
        access_token, refresh_token = self._client._set_tokens_from_user_input()
        self._client.write_tokens_to_credentials_file(
            access_token, refresh_token, profile=profile
        )
        print(
            f"'{profile}' profile configured! Username/password not required for "
            "future use of CCClient"
        )

from pyspark.ml.param.shared import HasPredictionCol, Param
from pyspark.ml.util import JavaMLReadable, JavaMLWritable
from pyspark.ml.wrapper import JavaEstimator, JavaModel, JavaParams
from pyspark.sql import DataFrame
from typing import Any

__all__ = ['FPGrowth', 'FPGrowthModel', 'PrefixSpan']

class _FPGrowthParams(HasPredictionCol):
    itemsCol: Param[str]
    minSupport: Param[float]
    numPartitions: Param[int]
    minConfidence: Param[float]
    def __init__(self, *args: Any) -> None: ...
    def getItemsCol(self) -> str: ...
    def getMinSupport(self) -> float: ...
    def getNumPartitions(self) -> int: ...
    def getMinConfidence(self) -> float: ...

class FPGrowthModel(JavaModel, _FPGrowthParams, JavaMLWritable, JavaMLReadable['FPGrowthModel']):
    def setItemsCol(self, value: str) -> FPGrowthModel: ...
    def setMinConfidence(self, value: float) -> FPGrowthModel: ...
    def setPredictionCol(self, value: str) -> FPGrowthModel: ...
    @property
    def freqItemsets(self) -> DataFrame: ...
    @property
    def associationRules(self) -> DataFrame: ...

class FPGrowth(JavaEstimator[FPGrowthModel], _FPGrowthParams, JavaMLWritable, JavaMLReadable['FPGrowth']):
    def __init__(self, *, minSupport: float = 0.3, minConfidence: float = 0.8, itemsCol: str = 'items', predictionCol: str = 'prediction', numPartitions: int | None = None) -> None: ...
    def setParams(self, *, minSupport: float = 0.3, minConfidence: float = 0.8, itemsCol: str = 'items', predictionCol: str = 'prediction', numPartitions: int | None = None) -> FPGrowth: ...
    def setItemsCol(self, value: str) -> FPGrowth: ...
    def setMinSupport(self, value: float) -> FPGrowth: ...
    def setNumPartitions(self, value: int) -> FPGrowth: ...
    def setMinConfidence(self, value: float) -> FPGrowth: ...
    def setPredictionCol(self, value: str) -> FPGrowth: ...

class PrefixSpan(JavaParams):
    minSupport: Param[float]
    maxPatternLength: Param[int]
    maxLocalProjDBSize: Param[int]
    sequenceCol: Param[str]
    def __init__(self, *, minSupport: float = 0.1, maxPatternLength: int = 10, maxLocalProjDBSize: int = 32000000, sequenceCol: str = 'sequence') -> None: ...
    def setParams(self, *, minSupport: float = 0.1, maxPatternLength: int = 10, maxLocalProjDBSize: int = 32000000, sequenceCol: str = 'sequence') -> PrefixSpan: ...
    def setMinSupport(self, value: float) -> PrefixSpan: ...
    def getMinSupport(self) -> float: ...
    def setMaxPatternLength(self, value: int) -> PrefixSpan: ...
    def getMaxPatternLength(self) -> int: ...
    def setMaxLocalProjDBSize(self, value: int) -> PrefixSpan: ...
    def getMaxLocalProjDBSize(self) -> int: ...
    def setSequenceCol(self, value: str) -> PrefixSpan: ...
    def getSequenceCol(self) -> str: ...
    def findFrequentSequentialPatterns(self, dataset: DataFrame) -> DataFrame: ...

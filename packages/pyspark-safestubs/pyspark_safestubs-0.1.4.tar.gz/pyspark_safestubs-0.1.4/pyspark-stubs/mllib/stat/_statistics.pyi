from numpy import ndarray
from pyspark.mllib._typing import CorrMethodType, KolmogorovSmirnovTestDistNameType
from pyspark.mllib.common import JavaModelWrapper
from pyspark.mllib.linalg import Matrix, Vector
from pyspark.mllib.regression import LabeledPoint
from pyspark.mllib.stat.test import ChiSqTestResult, KolmogorovSmirnovTestResult
from pyspark.rdd import RDD
from typing import overload

__all__ = ['MultivariateStatisticalSummary', 'Statistics']

class MultivariateStatisticalSummary(JavaModelWrapper):
    def mean(self) -> ndarray: ...
    def variance(self) -> ndarray: ...
    def count(self) -> int: ...
    def numNonzeros(self) -> ndarray: ...
    def max(self) -> ndarray: ...
    def min(self) -> ndarray: ...
    def normL1(self) -> ndarray: ...
    def normL2(self) -> ndarray: ...

class Statistics:
    @staticmethod
    def colStats(rdd: RDD[Vector]) -> MultivariateStatisticalSummary: ...
    @overload
    @staticmethod
    def corr(x: RDD[Vector], *, method: CorrMethodType | None = ...) -> Matrix: ...
    @overload
    @staticmethod
    def corr(x: RDD[float], y: RDD[float], method: CorrMethodType | None = ...) -> float: ...
    @overload
    @staticmethod
    def chiSqTest(observed: Matrix) -> ChiSqTestResult: ...
    @overload
    @staticmethod
    def chiSqTest(observed: Vector, expected: Vector | None = ...) -> ChiSqTestResult: ...
    @overload
    @staticmethod
    def chiSqTest(observed: RDD[LabeledPoint]) -> list[ChiSqTestResult]: ...
    @staticmethod
    def kolmogorovSmirnovTest(data: RDD[float], distName: KolmogorovSmirnovTestDistNameType = 'norm', *params: float) -> KolmogorovSmirnovTestResult: ...

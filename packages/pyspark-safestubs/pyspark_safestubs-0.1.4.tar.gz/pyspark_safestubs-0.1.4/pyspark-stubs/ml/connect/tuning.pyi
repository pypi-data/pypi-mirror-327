from _typeshed import Incomplete
from pyspark import inheritable_thread_target as inheritable_thread_target, keyword_only as keyword_only, since as since
from pyspark.ml._typing import ParamMap as ParamMap
from pyspark.ml.connect import Estimator as Estimator, Model as Model
from pyspark.ml.connect.base import Evaluator as Evaluator
from pyspark.ml.connect.io_utils import MetaAlgorithmReadWrite as MetaAlgorithmReadWrite, ParamsReadWrite as ParamsReadWrite
from pyspark.ml.param import Param as Param, Params as Params, TypeConverters as TypeConverters
from pyspark.ml.param.shared import HasParallelism as HasParallelism, HasSeed as HasSeed
from pyspark.sql import SparkSession as SparkSession
from pyspark.sql.dataframe import DataFrame as DataFrame
from pyspark.sql.functions import col as col, lit as lit, rand as rand
from pyspark.sql.utils import is_remote as is_remote
from typing import Any

class _ValidatorParams(HasSeed):
    estimator: Param[Estimator]
    estimatorParamMaps: Param[list['ParamMap']]
    evaluator: Param[Evaluator]
    def getEstimator(self) -> Estimator: ...
    def getEstimatorParamMaps(self) -> list['ParamMap']: ...
    def getEvaluator(self) -> Evaluator: ...

class _CrossValidatorParams(_ValidatorParams):
    numFolds: Param[int]
    foldCol: Param[str]
    def __init__(self, *args: Any) -> None: ...
    def getNumFolds(self) -> int: ...
    def getFoldCol(self) -> str: ...

class _CrossValidatorReadWrite(MetaAlgorithmReadWrite): ...

class CrossValidator(Estimator['CrossValidatorModel'], _CrossValidatorParams, HasParallelism, _CrossValidatorReadWrite):
    def __init__(self, *, estimator: Estimator | None = None, estimatorParamMaps: list['ParamMap'] | None = None, evaluator: Evaluator | None = None, numFolds: int = 3, seed: int | None = None, parallelism: int = 1, foldCol: str = '') -> None: ...
    def setParams(self, *, estimator: Estimator | None = None, estimatorParamMaps: list['ParamMap'] | None = None, evaluator: Evaluator | None = None, numFolds: int = 3, seed: int | None = None, parallelism: int = 1, foldCol: str = '') -> CrossValidator: ...
    def setEstimator(self, value: Estimator) -> CrossValidator: ...
    def setEstimatorParamMaps(self, value: list['ParamMap']) -> CrossValidator: ...
    def setEvaluator(self, value: Evaluator) -> CrossValidator: ...
    def setNumFolds(self, value: int) -> CrossValidator: ...
    def setFoldCol(self, value: str) -> CrossValidator: ...
    def setSeed(self, value: int) -> CrossValidator: ...
    def setParallelism(self, value: int) -> CrossValidator: ...
    def setCollectSubModels(self, value: bool) -> CrossValidator: ...
    def copy(self, extra: ParamMap | None = None) -> CrossValidator: ...

class CrossValidatorModel(Model, _CrossValidatorParams, _CrossValidatorReadWrite):
    bestModel: Incomplete
    avgMetrics: Incomplete
    stdMetrics: Incomplete
    def __init__(self, bestModel: Model | None = None, avgMetrics: list[float] | None = None, stdMetrics: list[float] | None = None) -> None: ...
    def copy(self, extra: ParamMap | None = None) -> CrossValidatorModel: ...

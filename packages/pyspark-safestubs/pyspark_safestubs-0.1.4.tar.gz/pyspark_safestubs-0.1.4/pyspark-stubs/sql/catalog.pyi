from pyspark.sql._typing import UserDefinedFunctionLike as UserDefinedFunctionLike
from pyspark.sql.dataframe import DataFrame as DataFrame
from pyspark.sql.session import SparkSession as SparkSession
from pyspark.sql.types import DataType as DataType, StructType as StructType
from pyspark.storagelevel import StorageLevel as StorageLevel
from typing import Any, Callable, NamedTuple

class CatalogMetadata(NamedTuple):
    name: str
    description: str | None

class Database(NamedTuple):
    name: str
    catalog: str | None
    description: str | None
    locationUri: str

class Table(NamedTuple):
    name: str
    catalog: str | None
    namespace: list[str] | None
    description: str | None
    tableType: str
    isTemporary: bool
    @property
    def database(self) -> str | None: ...

class Column(NamedTuple):
    name: str
    description: str | None
    dataType: str
    nullable: bool
    isPartition: bool
    isBucket: bool

class Function(NamedTuple):
    name: str
    catalog: str | None
    namespace: list[str] | None
    description: str | None
    className: str
    isTemporary: bool

class Catalog:
    def __init__(self, sparkSession: SparkSession) -> None: ...
    def currentCatalog(self) -> str: ...
    def setCurrentCatalog(self, catalogName: str) -> None: ...
    def listCatalogs(self, pattern: str | None = None) -> list[CatalogMetadata]: ...
    def currentDatabase(self) -> str: ...
    def setCurrentDatabase(self, dbName: str) -> None: ...
    def listDatabases(self, pattern: str | None = None) -> list[Database]: ...
    def getDatabase(self, dbName: str) -> Database: ...
    def databaseExists(self, dbName: str) -> bool: ...
    def listTables(self, dbName: str | None = None, pattern: str | None = None) -> list[Table]: ...
    def getTable(self, tableName: str) -> Table: ...
    def listFunctions(self, dbName: str | None = None, pattern: str | None = None) -> list[Function]: ...
    def functionExists(self, functionName: str, dbName: str | None = None) -> bool: ...
    def getFunction(self, functionName: str) -> Function: ...
    def listColumns(self, tableName: str, dbName: str | None = None) -> list[Column]: ...
    def tableExists(self, tableName: str, dbName: str | None = None) -> bool: ...
    def createExternalTable(self, tableName: str, path: str | None = None, source: str | None = None, schema: StructType | None = None, **options: str) -> DataFrame: ...
    def createTable(self, tableName: str, path: str | None = None, source: str | None = None, schema: StructType | None = None, description: str | None = None, **options: str) -> DataFrame: ...
    def dropTempView(self, viewName: str) -> bool: ...
    def dropGlobalTempView(self, viewName: str) -> bool: ...
    def registerFunction(self, name: str, f: Callable[..., Any], returnType: DataType | None = None) -> UserDefinedFunctionLike: ...
    def isCached(self, tableName: str) -> bool: ...
    def cacheTable(self, tableName: str, storageLevel: StorageLevel | None = None) -> None: ...
    def uncacheTable(self, tableName: str) -> None: ...
    def clearCache(self) -> None: ...
    def refreshTable(self, tableName: str) -> None: ...
    def recoverPartitions(self, tableName: str) -> None: ...
    def refreshByPath(self, path: str) -> None: ...

from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['PickleSerializer', 'CPickleSerializer', 'CloudPickleSerializer', 'MarshalSerializer', 'UTF8Deserializer']

class SpecialLengths:
    END_OF_DATA_SECTION: int
    PYTHON_EXCEPTION_THROWN: int
    TIMING_DATA: int
    END_OF_STREAM: int
    NULL: int
    START_ARROW_STREAM: int

class Serializer:
    def dump_stream(self, iterator, stream) -> None: ...
    def load_stream(self, stream) -> None: ...
    def dumps(self, obj) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...

class FramedSerializer(Serializer):
    def dump_stream(self, iterator, stream) -> None: ...
    def load_stream(self, stream) -> Generator[Incomplete]: ...
    def dumps(self, obj) -> None: ...
    def loads(self, obj) -> None: ...

class BatchedSerializer(Serializer):
    UNLIMITED_BATCH_SIZE: int
    UNKNOWN_BATCH_SIZE: int
    serializer: Incomplete
    batchSize: Incomplete
    def __init__(self, serializer, batchSize=...) -> None: ...
    def dump_stream(self, iterator, stream) -> None: ...
    def load_stream(self, stream): ...

class FlattenedValuesSerializer(BatchedSerializer):
    def __init__(self, serializer, batchSize: int = 10) -> None: ...
    def load_stream(self, stream): ...

class AutoBatchedSerializer(BatchedSerializer):
    bestSize: Incomplete
    def __init__(self, serializer, bestSize=...) -> None: ...
    def dump_stream(self, iterator, stream) -> None: ...

class CartesianDeserializer(Serializer):
    key_ser: Incomplete
    val_ser: Incomplete
    def __init__(self, key_ser, val_ser) -> None: ...
    def load_stream(self, stream): ...

class PairDeserializer(Serializer):
    key_ser: Incomplete
    val_ser: Incomplete
    def __init__(self, key_ser, val_ser) -> None: ...
    def load_stream(self, stream): ...

class NoOpSerializer(FramedSerializer):
    def loads(self, obj): ...
    def dumps(self, obj): ...

class PickleSerializer(FramedSerializer):
    def dumps(self, obj): ...
    def loads(self, obj, encoding: str = 'bytes'): ...

class CloudPickleSerializer(FramedSerializer):
    def dumps(self, obj): ...
    def loads(self, obj, encoding: str = 'bytes'): ...
CPickleSerializer = PickleSerializer
CPickleSerializer = CloudPickleSerializer

class MarshalSerializer(FramedSerializer):
    def dumps(self, obj): ...
    def loads(self, obj): ...

class AutoSerializer(FramedSerializer):
    def __init__(self) -> None: ...
    def dumps(self, obj): ...
    def loads(self, obj): ...

class CompressedSerializer(FramedSerializer):
    serializer: Incomplete
    def __init__(self, serializer) -> None: ...
    def dumps(self, obj): ...
    def loads(self, obj): ...

class UTF8Deserializer(Serializer):
    use_unicode: Incomplete
    def __init__(self, use_unicode: bool = True) -> None: ...
    def loads(self, stream): ...
    def load_stream(self, stream) -> Generator[Incomplete]: ...

class ChunkedStream:
    buffer_size: Incomplete
    buffer: Incomplete
    current_pos: int
    wrapped: Incomplete
    def __init__(self, wrapped, buffer_size) -> None: ...
    def write(self, bytes) -> None: ...
    def close(self) -> None: ...
    @property
    def closed(self): ...

import pandas as pd
from _typeshed import Incomplete
from abc import ABCMeta
from pyspark.pandas._typing import Dtype as Dtype, IndexOpsLike as IndexOpsLike, SeriesOrIndex as SeriesOrIndex
from pyspark.pandas.typedef import extension_dtypes as extension_dtypes
from pyspark.pandas.typedef.typehints import extension_dtypes_available as extension_dtypes_available, extension_float_dtypes_available as extension_float_dtypes_available, extension_object_dtypes_available as extension_object_dtypes_available, spark_type_to_pandas_dtype as spark_type_to_pandas_dtype
from pyspark.sql.types import ArrayType as ArrayType, BinaryType as BinaryType, BooleanType as BooleanType, DataType as DataType, DateType as DateType, DayTimeIntervalType as DayTimeIntervalType, DecimalType as DecimalType, FractionalType as FractionalType, IntegralType as IntegralType, MapType as MapType, NullType as NullType, NumericType as NumericType, StringType as StringType, StructType as StructType, TimestampNTZType as TimestampNTZType, TimestampType as TimestampType, UserDefinedType as UserDefinedType
from pyspark.sql.utils import get_column_class as get_column_class
from typing import Any

def is_valid_operand_for_numeric_arithmetic(operand: Any, *, allow_bool: bool = True) -> bool: ...
def transform_boolean_operand_to_numeric(operand: Any, *, spark_type: DataType | None = None) -> Any: ...

class DataTypeOps(metaclass=ABCMeta):
    def __new__(cls, dtype: Dtype, spark_type: DataType) -> DataTypeOps: ...
    dtype: Incomplete
    spark_type: Incomplete
    def __init__(self, dtype: Dtype, spark_type: DataType) -> None: ...
    @property
    def pretty_name(self) -> str: ...
    def add(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def sub(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def mul(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def truediv(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def floordiv(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def mod(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def pow(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def radd(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rsub(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rmul(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rtruediv(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rfloordiv(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rmod(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rpow(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def __and__(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def xor(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def __or__(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rand(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rxor(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def ror(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def neg(self, operand: IndexOpsLike) -> IndexOpsLike: ...
    def abs(self, operand: IndexOpsLike) -> IndexOpsLike: ...
    def lt(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def le(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def gt(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def ge(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def eq(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def ne(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def invert(self, operand: IndexOpsLike) -> IndexOpsLike: ...
    def restore(self, col: pd.Series) -> pd.Series: ...
    def prepare(self, col: pd.Series) -> pd.Series: ...
    def isnull(self, index_ops: IndexOpsLike) -> IndexOpsLike: ...
    def nan_to_null(self, index_ops: IndexOpsLike) -> IndexOpsLike: ...
    def astype(self, index_ops: IndexOpsLike, dtype: str | type | Dtype) -> IndexOpsLike: ...

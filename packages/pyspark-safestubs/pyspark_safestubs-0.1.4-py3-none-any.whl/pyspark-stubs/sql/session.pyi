from types import TracebackType
from typing import Any, Iterable, LiteralString, TypeVar, overload
from typing_extensions import Literal

from py4j.java_gateway import JavaObject
from pyspark import SparkConf, SparkContext
from pyspark.rdd import RDD
from pyspark.sql._typing import AtomicValue, OptionalPrimitiveType, RowLike
from pyspark.sql.catalog import Catalog
from pyspark.sql.conf import RuntimeConfig
from pyspark.sql.connect.client import SparkConnectClient
from pyspark.sql.dataframe import DataFrame
from pyspark.sql.pandas._typing import DataFrameLike as PandasDataFrameLike
from pyspark.sql.pandas.conversion import SparkConversionMixin
from pyspark.sql.readwriter import DataFrameReader
from pyspark.sql.streaming import DataStreamReader, StreamingQueryManager
from pyspark.sql.types import AtomicType, StructType
from pyspark.sql.udf import UDFRegistration
from pyspark.sql.udtf import UDTFRegistration

__all__ = ['SparkSession']

T = TypeVar("T", bound=LiteralString)

class classproperty(property):
    def __get__(self, instance: Any, owner: Any = None) -> SparkSession.Builder: ...

class SparkSession(SparkConversionMixin):
    class Builder:
        def __init__(self) -> None: ...
        @overload
        def config(self, *, conf: SparkConf) -> SparkSession.Builder: ...
        @overload
        def config(self, key: str, value: Any) -> SparkSession.Builder: ...
        @overload
        def config(self, *, map: dict[str, 'OptionalPrimitiveType']) -> SparkSession.Builder: ...
        def master(self, master: str) -> SparkSession.Builder: ...
        def remote(self, url: str) -> SparkSession.Builder: ...
        def appName(self, name: str) -> SparkSession.Builder: ...
        def enableHiveSupport(self) -> SparkSession.Builder: ...
        def getOrCreate(self) -> SparkSession: ...
        def create(self) -> SparkSession: ...
    def builder(cls) -> Builder: ...
    def __init__(self, sparkContext: SparkContext, jsparkSession: JavaObject | None = None, options: dict[str, Any] = {}) -> None: ...
    def newSession(self) -> SparkSession: ...
    @classmethod
    def getActiveSession(cls) -> SparkSession | None: ...
    @classmethod
    def active(cls) -> SparkSession: ...
    @property
    def sparkContext(self) -> SparkContext: ...
    @property
    def version(self) -> str: ...
    @property
    def conf(self) -> RuntimeConfig: ...
    @property
    def catalog(self) -> Catalog: ...
    @property
    def udf(self) -> UDFRegistration: ...
    @property
    def udtf(self) -> UDTFRegistration: ...
    def range(self, start: int, end: int | None = None, step: int = 1, numPartitions: int | None = None) -> DataFrame: ...
    @overload
    def createDataFrame(self, data: Iterable['RowLike'], schema: tuple[T, ...], samplingRatio: float | None = ...) -> DataFrame[T]: ...
    @overload
    def createDataFrame(self, data: Iterable['RowLike'], schema: None = None, samplingRatio: float | None = ...) -> DataFrame[Literal['NoSchema']]: ...
    @overload
    def createDataFrame(self, data: RDD[RowLike], schema: list[str] | tuple[str, ...] = ..., samplingRatio: float | None = ...) -> DataFrame: ...
    @overload
    def createDataFrame(self, data: Iterable['RowLike'], schema: StructType | str, *, verifySchema: bool = ...) -> DataFrame: ...
    @overload
    def createDataFrame(self, data: RDD[RowLike], schema: StructType | str, *, verifySchema: bool = ...) -> DataFrame: ...
    @overload
    def createDataFrame(self, data: RDD[AtomicValue], schema: AtomicType | str, verifySchema: bool = ...) -> DataFrame: ...
    @overload
    def createDataFrame(self, data: Iterable['AtomicValue'], schema: AtomicType | str, verifySchema: bool = ...) -> DataFrame: ...
    @overload
    def createDataFrame(self, data: PandasDataFrameLike, samplingRatio: float | None = ...) -> DataFrame: ...
    @overload
    def createDataFrame(self, data: PandasDataFrameLike, schema: StructType | str, verifySchema: bool = ...) -> DataFrame: ...
    def sql(self, sqlQuery: str, args: dict[str, Any] | list | None = None, **kwargs: Any) -> DataFrame: ...
    def table(self, tableName: str) -> DataFrame: ...
    @property
    def read(self) -> DataFrameReader: ...
    @property
    def readStream(self) -> DataStreamReader: ...
    @property
    def streams(self) -> StreamingQueryManager: ...
    def stop(self) -> None: ...
    def __enter__(self) -> SparkSession: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: TracebackType | None) -> None: ...
    @property
    def client(self) -> SparkConnectClient: ...
    def addArtifacts(self, *path: str, pyfile: bool = False, archive: bool = False, file: bool = False) -> None: ...
    addArtifact = addArtifacts
    def copyFromLocalToFs(self, local_path: str, dest_path: str) -> None: ...
    def interruptAll(self) -> list[str]: ...
    def interruptTag(self, tag: str) -> list[str]: ...
    def interruptOperation(self, op_id: str) -> list[str]: ...
    def addTag(self, tag: str) -> None: ...
    def removeTag(self, tag: str) -> None: ...
    def getTags(self) -> set[str]: ...
    def clearTags(self) -> None: ...

from pyspark.sql.connect._typing import ColumnOrName
from pyspark.sql.connect.expressions import Expression, SortOrder
from typing import Sequence

__all__ = ['Window', 'WindowSpec']

class WindowFrame:
    def __init__(self, isRowFrame: bool, start: int, end: int) -> None: ...

class WindowSpec:
    def __init__(self, partitionSpec: Sequence[Expression], orderSpec: Sequence[SortOrder], frame: WindowFrame | None) -> None: ...
    def partitionBy(self, *cols: ColumnOrName | list['ColumnOrName']) -> WindowSpec: ...
    def orderBy(self, *cols: ColumnOrName | list['ColumnOrName']) -> WindowSpec: ...
    def rowsBetween(self, start: int, end: int) -> WindowSpec: ...
    def rangeBetween(self, start: int, end: int) -> WindowSpec: ...

class Window:
    unboundedPreceding: int
    unboundedFollowing: int
    currentRow: int
    @staticmethod
    def partitionBy(*cols: ColumnOrName | list['ColumnOrName']) -> WindowSpec: ...
    @staticmethod
    def orderBy(*cols: ColumnOrName | list['ColumnOrName']) -> WindowSpec: ...
    @staticmethod
    def rowsBetween(start: int, end: int) -> WindowSpec: ...
    @staticmethod
    def rangeBetween(start: int, end: int) -> WindowSpec: ...

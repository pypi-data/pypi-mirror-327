from pyspark.context import SparkContext
from pyspark.mllib.linalg import Vector
from pyspark.rdd import RDD

__all__ = ['RandomRDDs']

class RandomRDDs:
    @staticmethod
    def uniformRDD(sc: SparkContext, size: int, numPartitions: int | None = None, seed: int | None = None) -> RDD[float]: ...
    @staticmethod
    def normalRDD(sc: SparkContext, size: int, numPartitions: int | None = None, seed: int | None = None) -> RDD[float]: ...
    @staticmethod
    def logNormalRDD(sc: SparkContext, mean: float, std: float, size: int, numPartitions: int | None = None, seed: int | None = None) -> RDD[float]: ...
    @staticmethod
    def poissonRDD(sc: SparkContext, mean: float, size: int, numPartitions: int | None = None, seed: int | None = None) -> RDD[float]: ...
    @staticmethod
    def exponentialRDD(sc: SparkContext, mean: float, size: int, numPartitions: int | None = None, seed: int | None = None) -> RDD[float]: ...
    @staticmethod
    def gammaRDD(sc: SparkContext, shape: float, scale: float, size: int, numPartitions: int | None = None, seed: int | None = None) -> RDD[float]: ...
    @staticmethod
    def uniformVectorRDD(sc: SparkContext, numRows: int, numCols: int, numPartitions: int | None = None, seed: int | None = None) -> RDD[Vector]: ...
    @staticmethod
    def normalVectorRDD(sc: SparkContext, numRows: int, numCols: int, numPartitions: int | None = None, seed: int | None = None) -> RDD[Vector]: ...
    @staticmethod
    def logNormalVectorRDD(sc: SparkContext, mean: float, std: float, numRows: int, numCols: int, numPartitions: int | None = None, seed: int | None = None) -> RDD[Vector]: ...
    @staticmethod
    def poissonVectorRDD(sc: SparkContext, mean: float, numRows: int, numCols: int, numPartitions: int | None = None, seed: int | None = None) -> RDD[Vector]: ...
    @staticmethod
    def exponentialVectorRDD(sc: SparkContext, mean: float, numRows: int, numCols: int, numPartitions: int | None = None, seed: int | None = None) -> RDD[Vector]: ...
    @staticmethod
    def gammaVectorRDD(sc: SparkContext, shape: float, scale: float, numRows: int, numCols: int, numPartitions: int | None = None, seed: int | None = None) -> RDD[Vector]: ...

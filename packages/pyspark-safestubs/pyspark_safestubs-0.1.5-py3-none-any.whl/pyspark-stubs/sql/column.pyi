import datetime
from decimal import Decimal
from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Generic,
    Iterable,
    List,
    Literal,
    Optional,
    Tuple,
    TypeAlias,
    TypeVar,
    Union,
    overload,
)

from _typeshed import Incomplete
from py4j.java_gateway import JavaObject
from pyspark.sql._typing import (
    ColumnOrName,
    DateTimeLiteral,
    DecimalLiteral,
    LiteralType,
)
from pyspark.sql.types import DataType
from pyspark.sql.window import WindowSpec
from typing_extensions import LiteralString

T = TypeVar("T", bound=LiteralString, contravariant=True)
TAlias = TypeVar("TAlias", bound=LiteralString, covariant=True)
T2 = TypeVar("T2", bound=LiteralString, covariant=True)
In = TypeVar("In", bound=LiteralString, covariant=True)
Out = TypeVar("Out", bound=LiteralString, covariant=True)
InOther = TypeVar("InOther", bound=LiteralString)
OutOther = TypeVar("OutOther", bound=LiteralString)
OutLit = TypeVar("OutLit", bound=LiteralString)
TSource = TypeVar("TSource", bound=LiteralString)
TResult = TypeVar("TResult", bound=LiteralString)
PrimitiveType = Union[bool, float, int, str]


__all__ = ['Column']
BinOp :TypeAlias= Callable[
    ["Column", Union["Column", "LiteralType", "DecimalLiteral", "DateTimeLiteral"]], "Column"
]

class Column(Generic[In, Out]):
    def __init__(self, jc: JavaObject) -> None: ...

    def __binary__op(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __neg__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __add__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __sub__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __mul__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __div__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __truediv__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __mod__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __radd__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __rsub__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __rmul__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __rdiv__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __rtruediv__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __rmod__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __pow__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __rpow__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __eq__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __ne__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __lt__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __le__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __ge__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __gt__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    eqNullSafe: Incomplete
    def __and__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Literal['expr']]: ...
    def __or__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Literal['expr']]: ...
    def __invert__(self) -> Column[In, Out]: ...

    def __rand__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __ror__(self, other: Column[InOther, OutOther] | LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Union[Out, OutOther]]: ...
    def __contains__(self, item: Any) -> None: ...
    bitwiseOR: Incomplete
    bitwiseAND: Incomplete
    bitwiseXOR: Incomplete
    def getItem(self, key: Any) -> Column[In, Out]: ...
    def getField(self, name: Any) -> Column[In, Out]: ...
    def withField(self, fieldName: str, col: Column[In, Out]) -> Column[In, Out]: ...
    def dropFields(self, *fieldNames: str) -> Column[In, Out]: ...
    def __getattr__(self, item: Any) -> Column[In, Out]: ...
    def __getitem__(self, k: Any) -> Column[In, Out]: ...
    def __iter__(self) -> None: ...
    def contains(self, item: Any) -> Column[In, Literal['expr']]: ...
    @overload
    def startswith(self, other: str) -> Column[In, Literal['expr']]: ...
    @overload
    def startswith(self, other: Column[In, Out]) -> Column[In, Literal['expr']]: ...
    @overload
    def endswith(self, other: str) -> Column[In, Literal['expr']]: ...
    @overload
    def endswith(self, other: Column[In, Out]) -> Column[In, Literal['expr']]: ...
    @overload
    def like(self, other: str) -> Column[In, Literal['expr']]: ...
    @overload
    def like(self, other: Column[In, Out]) -> Column[In, Literal['expr']]: ...
    def rlike(self, other: str) -> Column[In, Literal['expr']]: ...
    def ilike(self, other: str) -> Column[In, Literal['expr']]: ...
    @overload
    def substr(self, startPos: int, length: int) -> Column[In, Literal['expr']]: ...
    @overload
    def substr(self, startPos: Column[In, Out], length: Column[In, Out]) -> Column[In, Out]: ...
    def isin(self, *cols: Any) -> Column[In, Out]: ...
    def asc(self) -> Column[In, Out]: ...
    def asc_nulls_first(self) -> Column[In, Out]: ...
    def asc_nulls_last(self) -> Column[In, Out]: ...
    def desc(self) -> Column[In, Out]: ...
    def desc_nulls_first(self) -> Column[In, Out]: ...
    def desc_nulls_last(self) -> Column[In, Out]: ...
    def isNull(self) -> Column[In, Literal['expr']]: ...
    def isNotNull(self) -> Column[In, Literal['expr']]: ...
    def alias(self, *alias: OutOther, **kwargs: Any) -> Column[In, OutOther]: ...
    name: Incomplete
    def cast(self, dataType: DataType | str) -> Column[In, Out]: ...
    astype: Incomplete
    def between(self, lowerBound: Column | LiteralType | DateTimeLiteral | DecimalLiteral, upperBound: Column | LiteralType | DateTimeLiteral | DecimalLiteral) -> Column: ...
    def when(self, condition: Column[InOther, Any], value: Column[InOther, Any]) -> Column[Union[In, InOther], Literal['expr']]: ...
    @overload
    def when(self, condition: Column[InOther, Any], value: LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[Union[In, InOther], Literal['expr']]: ...
    @overload
    def when(self, condition: Column[InOther, Any], value: Column[InOther, Any]) -> Column[Union[In, InOther], Literal['expr']]: ...
    @overload
    def otherwise(self, value: Column[InOther, OutOther]) -> Column[Union[In, InOther], Literal['expr']]: ...
    @overload
    def otherwise(self, value: LiteralType | DecimalLiteral | DateTimeLiteral) -> Column[In, Literal['expr']]: ...
    def over(self, window: WindowSpec[InOther]) -> Column[Union[In, InOther], Out]: ...
    def __nonzero__(self) -> None: ...
    __bool__ = __nonzero__

import abc
import uuid
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from py4j.java_gateway import JavaObject
from pyspark.sql import Row
from typing import Any

__all__ = ['StreamingQueryListener']

class StreamingQueryListener(ABC, metaclass=abc.ABCMeta):
    @property
    def spark(self) -> SparkSession | None: ...
    @abstractmethod
    def onQueryStarted(self, event: QueryStartedEvent) -> None: ...
    @abstractmethod
    def onQueryProgress(self, event: QueryProgressEvent) -> None: ...
    def onQueryIdle(self, event: QueryIdleEvent) -> None: ...
    @abstractmethod
    def onQueryTerminated(self, event: QueryTerminatedEvent) -> None: ...

class JStreamingQueryListener:
    pylistener: Incomplete
    def __init__(self, pylistener: StreamingQueryListener) -> None: ...
    def onQueryStarted(self, jevent: JavaObject) -> None: ...
    def onQueryProgress(self, jevent: JavaObject) -> None: ...
    def onQueryIdle(self, jevent: JavaObject) -> None: ...
    def onQueryTerminated(self, jevent: JavaObject) -> None: ...
    class Java:
        implements: Incomplete

class QueryStartedEvent:
    def __init__(self, id: uuid.UUID, runId: uuid.UUID, name: str | None, timestamp: str) -> None: ...
    @classmethod
    def fromJObject(cls, jevent: JavaObject) -> QueryStartedEvent: ...
    @classmethod
    def fromJson(cls, j: dict[str, Any]) -> QueryStartedEvent: ...
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def runId(self) -> uuid.UUID: ...
    @property
    def name(self) -> str | None: ...
    @property
    def timestamp(self) -> str: ...

class QueryProgressEvent:
    def __init__(self, progress: StreamingQueryProgress) -> None: ...
    @classmethod
    def fromJObject(cls, jevent: JavaObject) -> QueryProgressEvent: ...
    @classmethod
    def fromJson(cls, j: dict[str, Any]) -> QueryProgressEvent: ...
    @property
    def progress(self) -> StreamingQueryProgress: ...

class QueryIdleEvent:
    def __init__(self, id: uuid.UUID, runId: uuid.UUID, timestamp: str) -> None: ...
    @classmethod
    def fromJObject(cls, jevent: JavaObject) -> QueryIdleEvent: ...
    @classmethod
    def fromJson(cls, j: dict[str, Any]) -> QueryIdleEvent: ...
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def runId(self) -> uuid.UUID: ...
    @property
    def timestamp(self) -> str: ...

class QueryTerminatedEvent:
    def __init__(self, id: uuid.UUID, runId: uuid.UUID, exception: str | None, errorClassOnException: str | None) -> None: ...
    @classmethod
    def fromJObject(cls, jevent: JavaObject) -> QueryTerminatedEvent: ...
    @classmethod
    def fromJson(cls, j: dict[str, Any]) -> QueryTerminatedEvent: ...
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def runId(self) -> uuid.UUID: ...
    @property
    def exception(self) -> str | None: ...
    @property
    def errorClassOnException(self) -> str | None: ...

class StreamingQueryProgress:
    def __init__(self, id: uuid.UUID, runId: uuid.UUID, name: str | None, timestamp: str, batchId: int, batchDuration: int, durationMs: dict[str, int], eventTime: dict[str, str], stateOperators: list['StateOperatorProgress'], sources: list['SourceProgress'], sink: SinkProgress, numInputRows: int, inputRowsPerSecond: float, processedRowsPerSecond: float, observedMetrics: dict[str, Row], jprogress: JavaObject | None = None, jdict: dict[str, Any] | None = None) -> None: ...
    @classmethod
    def fromJObject(cls, jprogress: JavaObject) -> StreamingQueryProgress: ...
    @classmethod
    def fromJson(cls, j: dict[str, Any]) -> StreamingQueryProgress: ...
    @property
    def id(self) -> uuid.UUID: ...
    @property
    def runId(self) -> uuid.UUID: ...
    @property
    def name(self) -> str | None: ...
    @property
    def timestamp(self) -> str: ...
    @property
    def batchId(self) -> int: ...
    @property
    def batchDuration(self) -> int: ...
    @property
    def durationMs(self) -> dict[str, int]: ...
    @property
    def eventTime(self) -> dict[str, str]: ...
    @property
    def stateOperators(self) -> list['StateOperatorProgress']: ...
    @property
    def sources(self) -> list['SourceProgress']: ...
    @property
    def sink(self) -> SinkProgress: ...
    @property
    def observedMetrics(self) -> dict[str, Row]: ...
    @property
    def numInputRows(self) -> int: ...
    @property
    def inputRowsPerSecond(self) -> float: ...
    @property
    def processedRowsPerSecond(self) -> float: ...
    @property
    def json(self) -> str: ...
    @property
    def prettyJson(self) -> str: ...

class StateOperatorProgress:
    def __init__(self, operatorName: str, numRowsTotal: int, numRowsUpdated: int, numRowsRemoved: int, allUpdatesTimeMs: int, allRemovalsTimeMs: int, commitTimeMs: int, memoryUsedBytes: int, numRowsDroppedByWatermark: int, numShufflePartitions: int, numStateStoreInstances: int, customMetrics: dict[str, int], jprogress: JavaObject | None = None, jdict: dict[str, Any] | None = None) -> None: ...
    @classmethod
    def fromJObject(cls, jprogress: JavaObject) -> StateOperatorProgress: ...
    @classmethod
    def fromJson(cls, j: dict[str, Any]) -> StateOperatorProgress: ...
    @property
    def operatorName(self) -> str: ...
    @property
    def numRowsTotal(self) -> int: ...
    @property
    def numRowsUpdated(self) -> int: ...
    @property
    def allUpdatesTimeMs(self) -> int: ...
    @property
    def numRowsRemoved(self) -> int: ...
    @property
    def allRemovalsTimeMs(self) -> int: ...
    @property
    def commitTimeMs(self) -> int: ...
    @property
    def memoryUsedBytes(self) -> int: ...
    @property
    def numRowsDroppedByWatermark(self) -> int: ...
    @property
    def numShufflePartitions(self) -> int: ...
    @property
    def numStateStoreInstances(self) -> int: ...
    @property
    def customMetrics(self) -> dict[str, int]: ...
    @property
    def json(self) -> str: ...
    @property
    def prettyJson(self) -> str: ...

class SourceProgress:
    def __init__(self, description: str, startOffset: str, endOffset: str, latestOffset: str, numInputRows: int, inputRowsPerSecond: float, processedRowsPerSecond: float, metrics: dict[str, str], jprogress: JavaObject | None = None, jdict: dict[str, Any] | None = None) -> None: ...
    @classmethod
    def fromJObject(cls, jprogress: JavaObject) -> SourceProgress: ...
    @classmethod
    def fromJson(cls, j: dict[str, Any]) -> SourceProgress: ...
    @property
    def description(self) -> str: ...
    @property
    def startOffset(self) -> str: ...
    @property
    def endOffset(self) -> str: ...
    @property
    def latestOffset(self) -> str: ...
    @property
    def numInputRows(self) -> int: ...
    @property
    def inputRowsPerSecond(self) -> float: ...
    @property
    def processedRowsPerSecond(self) -> float: ...
    @property
    def metrics(self) -> dict[str, str]: ...
    @property
    def json(self) -> str: ...
    @property
    def prettyJson(self) -> str: ...

class SinkProgress:
    def __init__(self, description: str, numOutputRows: int, metrics: dict[str, str], jprogress: JavaObject | None = None, jdict: dict[str, Any] | None = None) -> None: ...
    @classmethod
    def fromJObject(cls, jprogress: JavaObject) -> SinkProgress: ...
    @classmethod
    def fromJson(cls, j: dict[str, Any]) -> SinkProgress: ...
    @property
    def description(self) -> str: ...
    @property
    def numOutputRows(self) -> int: ...
    @property
    def metrics(self) -> dict[str, str]: ...
    @property
    def json(self) -> str: ...
    @property
    def prettyJson(self) -> str: ...

from typing import Any, Generic, LiteralString, TypeVar, Union, overload

from _typeshed import Incomplete
from py4j.java_gateway import JavaObject
from pyspark.sql._typing import LiteralType
from pyspark.sql.column import Column
from pyspark.sql.dataframe import DataFrame
from pyspark.sql.pandas.group_ops import PandasGroupedOpsMixin

TCols = TypeVar("TCols", bound=LiteralString)
TGroupedBy = TypeVar("TGroupedBy", bound=LiteralString)
TResCols = TypeVar("TResCols", bound=LiteralString)
__all__ = ['GroupedData']

class GroupedData(PandasGroupedOpsMixin, Generic[TCols, TGroupedBy]):
    session: Incomplete
    def __init__(self, jgd: JavaObject, df: DataFrame[TCols]) -> None: ...
    @overload
    def agg(self, *exprs: Column[Any, TResCols]) -> DataFrame[Union[TResCols, TGroupedBy]]: ...
    @overload
    def agg(self, /, __exprs: dict[str, str]) -> DataFrame[TCols]: ...
    def count(self) -> DataFrame[TCols]: ...
    def mean(self, *cols: str) -> DataFrame[TCols]: ...
    def avg(self, *cols: str) -> DataFrame[TCols]: ...
    def max(self, *cols: str) -> DataFrame[TCols]: ...
    def min(self, *cols: str) -> DataFrame[TCols]: ...
    def sum(self, *cols: str) -> DataFrame[TCols]: ...
    def pivot(self, pivot_col: str, values: list['LiteralType'] | None = None) -> GroupedData[TCols, TGroupedBy]: ...

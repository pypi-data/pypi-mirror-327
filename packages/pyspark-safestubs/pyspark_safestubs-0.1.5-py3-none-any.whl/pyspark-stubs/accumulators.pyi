import socketserver as SocketServer
import socketserver.BaseRequestHandler
from _typeshed import Incomplete
from typing import Callable, Generic, TypeVar

__all__ = ['Accumulator', 'AccumulatorParam']

T = TypeVar('T')
U = TypeVar('U', bound='SupportsIAdd')

class Accumulator(Generic[T]):
    aid: Incomplete
    accum_param: Incomplete
    def __init__(self, aid: int, value: T, accum_param: AccumulatorParam[T]) -> None: ...
    def __reduce__(self) -> tuple[Callable[[int, T, AccumulatorParam[T]], 'Accumulator[T]'], tuple[int, T, 'AccumulatorParam[T]']]: ...
    @property
    def value(self) -> T: ...
    @value.setter
    def value(self, value: T) -> None: ...
    def add(self, term: T) -> None: ...
    def __iadd__(self, term: T) -> Accumulator[T]: ...

class AccumulatorParam(Generic[T]):
    def zero(self, value: T) -> T: ...
    def addInPlace(self, value1: T, value2: T) -> T: ...

class AddingAccumulatorParam(AccumulatorParam[U]):
    zero_value: Incomplete
    def __init__(self, zero_value: U) -> None: ...
    def zero(self, value: U) -> U: ...
    def addInPlace(self, value1: U, value2: U) -> U: ...

class _UpdateRequestHandler(SocketServer.StreamRequestHandler):
    def handle(self) -> None: ...

class AccumulatorServer(SocketServer.TCPServer):
    auth_token: Incomplete
    def __init__(self, server_address: tuple[str, int], RequestHandlerClass: type['socketserver.BaseRequestHandler'], auth_token: str) -> None: ...
    server_shutdown: bool
    def shutdown(self) -> None: ...

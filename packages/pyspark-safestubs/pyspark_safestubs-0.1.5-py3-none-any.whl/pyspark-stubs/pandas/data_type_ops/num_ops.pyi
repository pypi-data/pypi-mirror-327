import pandas as pd
from pyspark.errors import PySparkValueError as PySparkValueError
from pyspark.pandas._typing import Dtype as Dtype, IndexOpsLike as IndexOpsLike, SeriesOrIndex as SeriesOrIndex
from pyspark.pandas.base import IndexOpsMixin as IndexOpsMixin, column_op as column_op, numpy_column_op as numpy_column_op
from pyspark.pandas.config import get_option as get_option
from pyspark.pandas.data_type_ops.base import DataTypeOps as DataTypeOps, is_valid_operand_for_numeric_arithmetic as is_valid_operand_for_numeric_arithmetic, transform_boolean_operand_to_numeric as transform_boolean_operand_to_numeric
from pyspark.pandas.typedef.typehints import extension_dtypes as extension_dtypes, pandas_on_spark_type as pandas_on_spark_type
from pyspark.sql.types import BooleanType as BooleanType, DataType as DataType, StringType as StringType
from pyspark.sql.utils import get_column_class as get_column_class, pyspark_column_op as pyspark_column_op
from typing import Any

class NumericOps(DataTypeOps):
    @property
    def pretty_name(self) -> str: ...
    def add(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def sub(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def mod(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def pow(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def radd(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rsub(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rmul(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rpow(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rmod(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def neg(self, operand: IndexOpsLike) -> IndexOpsLike: ...
    def abs(self, operand: IndexOpsLike) -> IndexOpsLike: ...
    def eq(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def ne(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def lt(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def le(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def ge(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def gt(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...

class IntegralOps(NumericOps):
    def xor(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    @property
    def pretty_name(self) -> str: ...
    def mul(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def truediv(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def floordiv(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rtruediv(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rfloordiv(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def invert(self, operand: IndexOpsLike) -> IndexOpsLike: ...
    def astype(self, index_ops: IndexOpsLike, dtype: str | type | Dtype) -> IndexOpsLike: ...

class FractionalOps(NumericOps):
    @property
    def pretty_name(self) -> str: ...
    def mul(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def truediv(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def floordiv(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rtruediv(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def rfloordiv(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def isnull(self, index_ops: IndexOpsLike) -> IndexOpsLike: ...
    def nan_to_null(self, index_ops: IndexOpsLike) -> IndexOpsLike: ...
    def astype(self, index_ops: IndexOpsLike, dtype: str | type | Dtype) -> IndexOpsLike: ...

class DecimalOps(FractionalOps):
    @property
    def pretty_name(self) -> str: ...
    def lt(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def le(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def gt(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def ge(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def isnull(self, index_ops: IndexOpsLike) -> IndexOpsLike: ...
    def nan_to_null(self, index_ops: IndexOpsLike) -> IndexOpsLike: ...
    def astype(self, index_ops: IndexOpsLike, dtype: str | type | Dtype) -> IndexOpsLike: ...
    def rpow(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...

class IntegralExtensionOps(IntegralOps):
    def xor(self, left: IndexOpsLike, right: Any) -> SeriesOrIndex: ...
    def restore(self, col: pd.Series) -> pd.Series: ...
    def astype(self, index_ops: IndexOpsLike, dtype: str | type | Dtype) -> IndexOpsLike: ...

class FractionalExtensionOps(FractionalOps):
    def restore(self, col: pd.Series) -> pd.Series: ...
    def astype(self, index_ops: IndexOpsLike, dtype: str | type | Dtype) -> IndexOpsLike: ...

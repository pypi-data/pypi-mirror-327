from _typeshed import Incomplete
from pyspark import RDD
from pyspark.ml._typing import VectorLike
from pyspark.mllib.common import JavaModelWrapper
from pyspark.mllib.linalg import Matrix, QRDecomposition, Vector
from pyspark.mllib.stat import MultivariateStatisticalSummary
from pyspark.sql import DataFrame
from pyspark.storagelevel import StorageLevel
from typing import Generic, TypeVar

__all__ = ['BlockMatrix', 'CoordinateMatrix', 'DistributedMatrix', 'IndexedRow', 'IndexedRowMatrix', 'MatrixEntry', 'RowMatrix', 'SingularValueDecomposition']

UT = TypeVar('UT', bound='DistributedMatrix')
VT = TypeVar('VT', bound='Matrix')

class DistributedMatrix:
    def numRows(self) -> int: ...
    def numCols(self) -> int: ...

class RowMatrix(DistributedMatrix):
    def __init__(self, rows: RDD[Vector] | DataFrame, numRows: int = 0, numCols: int = 0) -> None: ...
    @property
    def rows(self) -> RDD[Vector]: ...
    def numRows(self) -> int: ...
    def numCols(self) -> int: ...
    def computeColumnSummaryStatistics(self) -> MultivariateStatisticalSummary: ...
    def computeCovariance(self) -> Matrix: ...
    def computeGramianMatrix(self) -> Matrix: ...
    def columnSimilarities(self, threshold: float = 0.0) -> CoordinateMatrix: ...
    def tallSkinnyQR(self, computeQ: bool = False) -> QRDecomposition[RowMatrix | None, Matrix]: ...
    def computeSVD(self, k: int, computeU: bool = False, rCond: float = 1e-09) -> SingularValueDecomposition[RowMatrix, Matrix]: ...
    def computePrincipalComponents(self, k: int) -> Matrix: ...
    def multiply(self, matrix: Matrix) -> RowMatrix: ...

class SingularValueDecomposition(JavaModelWrapper, Generic[UT, VT]):
    @property
    def U(self) -> UT | None: ...
    @property
    def s(self) -> Vector: ...
    @property
    def V(self) -> VT: ...

class IndexedRow:
    index: Incomplete
    vector: Incomplete
    def __init__(self, index: int, vector: VectorLike) -> None: ...

class IndexedRowMatrix(DistributedMatrix):
    def __init__(self, rows: RDD[tuple[int, 'VectorLike'] | IndexedRow], numRows: int = 0, numCols: int = 0) -> None: ...
    @property
    def rows(self) -> RDD[IndexedRow]: ...
    def numRows(self) -> int: ...
    def numCols(self) -> int: ...
    def columnSimilarities(self) -> CoordinateMatrix: ...
    def computeGramianMatrix(self) -> Matrix: ...
    def toRowMatrix(self) -> RowMatrix: ...
    def toCoordinateMatrix(self) -> CoordinateMatrix: ...
    def toBlockMatrix(self, rowsPerBlock: int = 1024, colsPerBlock: int = 1024) -> BlockMatrix: ...
    def computeSVD(self, k: int, computeU: bool = False, rCond: float = 1e-09) -> SingularValueDecomposition['IndexedRowMatrix', Matrix]: ...
    def multiply(self, matrix: Matrix) -> IndexedRowMatrix: ...

class MatrixEntry:
    i: Incomplete
    j: Incomplete
    value: Incomplete
    def __init__(self, i: int, j: int, value: float) -> None: ...

class CoordinateMatrix(DistributedMatrix):
    def __init__(self, entries: RDD[tuple[int, int, float] | MatrixEntry], numRows: int = 0, numCols: int = 0) -> None: ...
    @property
    def entries(self) -> RDD[MatrixEntry]: ...
    def numRows(self) -> int: ...
    def numCols(self) -> int: ...
    def transpose(self) -> CoordinateMatrix: ...
    def toRowMatrix(self) -> RowMatrix: ...
    def toIndexedRowMatrix(self) -> IndexedRowMatrix: ...
    def toBlockMatrix(self, rowsPerBlock: int = 1024, colsPerBlock: int = 1024) -> BlockMatrix: ...

class BlockMatrix(DistributedMatrix):
    def __init__(self, blocks: RDD[tuple[tuple[int, int], Matrix]], rowsPerBlock: int, colsPerBlock: int, numRows: int = 0, numCols: int = 0) -> None: ...
    @property
    def blocks(self) -> RDD[tuple[tuple[int, int], Matrix]]: ...
    @property
    def rowsPerBlock(self) -> int: ...
    @property
    def colsPerBlock(self) -> int: ...
    @property
    def numRowBlocks(self) -> int: ...
    @property
    def numColBlocks(self) -> int: ...
    def numRows(self) -> int: ...
    def numCols(self) -> int: ...
    def cache(self) -> BlockMatrix: ...
    def persist(self, storageLevel: StorageLevel) -> BlockMatrix: ...
    def validate(self) -> None: ...
    def add(self, other: BlockMatrix) -> BlockMatrix: ...
    def subtract(self, other: BlockMatrix) -> BlockMatrix: ...
    def multiply(self, other: BlockMatrix) -> BlockMatrix: ...
    def transpose(self) -> BlockMatrix: ...
    def toLocalMatrix(self) -> Matrix: ...
    def toIndexedRowMatrix(self) -> IndexedRowMatrix: ...
    def toCoordinateMatrix(self) -> CoordinateMatrix: ...

from py4j.java_gateway import JavaObject as JavaObject
from pyspark.resource.requests import ExecutorResourceRequest as ExecutorResourceRequest, ExecutorResourceRequests as ExecutorResourceRequests, TaskResourceRequest as TaskResourceRequest, TaskResourceRequests as TaskResourceRequests
from typing import overload

class ResourceProfile:
    @overload
    def __init__(self, _java_resource_profile: JavaObject) -> None: ...
    @overload
    def __init__(self, _java_resource_profile: None = ..., _exec_req: dict[str, ExecutorResourceRequest] | None = ..., _task_req: dict[str, TaskResourceRequest] | None = ...) -> None: ...
    @property
    def id(self) -> int: ...
    @property
    def taskResources(self) -> dict[str, TaskResourceRequest]: ...
    @property
    def executorResources(self) -> dict[str, ExecutorResourceRequest]: ...

class ResourceProfileBuilder:
    def __init__(self) -> None: ...
    def require(self, resourceRequest: ExecutorResourceRequests | TaskResourceRequests) -> ResourceProfileBuilder: ...
    def clearExecutorResourceRequests(self) -> None: ...
    def clearTaskResourceRequests(self) -> None: ...
    @property
    def taskResources(self) -> dict[str, TaskResourceRequest]: ...
    @property
    def executorResources(self) -> dict[str, ExecutorResourceRequest]: ...
    @property
    def build(self) -> ResourceProfile: ...

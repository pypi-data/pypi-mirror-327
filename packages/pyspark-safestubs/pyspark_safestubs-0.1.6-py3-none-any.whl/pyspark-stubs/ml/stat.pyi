from _typeshed import Incomplete
from py4j.java_gateway import JavaObject as JavaObject
from pyspark import SparkContext as SparkContext, since as since
from pyspark.ml.linalg import Matrix as Matrix, Vector as Vector
from pyspark.ml.wrapper import JavaWrapper as JavaWrapper
from pyspark.sql.column import Column as Column
from pyspark.sql.dataframe import DataFrame as DataFrame
from pyspark.sql.functions import lit as lit

class ChiSquareTest:
    @staticmethod
    def test(dataset: DataFrame, featuresCol: str, labelCol: str, flatten: bool = False) -> DataFrame: ...

class Correlation:
    @staticmethod
    def corr(dataset: DataFrame, column: str, method: str = 'pearson') -> DataFrame: ...

class KolmogorovSmirnovTest:
    @staticmethod
    def test(dataset: DataFrame, sampleCol: str, distName: str, *params: float) -> DataFrame: ...

class Summarizer:
    @staticmethod
    def mean(col: Column, weightCol: Column | None = None) -> Column: ...
    @staticmethod
    def sum(col: Column, weightCol: Column | None = None) -> Column: ...
    @staticmethod
    def variance(col: Column, weightCol: Column | None = None) -> Column: ...
    @staticmethod
    def std(col: Column, weightCol: Column | None = None) -> Column: ...
    @staticmethod
    def count(col: Column, weightCol: Column | None = None) -> Column: ...
    @staticmethod
    def numNonZeros(col: Column, weightCol: Column | None = None) -> Column: ...
    @staticmethod
    def max(col: Column, weightCol: Column | None = None) -> Column: ...
    @staticmethod
    def min(col: Column, weightCol: Column | None = None) -> Column: ...
    @staticmethod
    def normL1(col: Column, weightCol: Column | None = None) -> Column: ...
    @staticmethod
    def normL2(col: Column, weightCol: Column | None = None) -> Column: ...
    @staticmethod
    def metrics(*metrics: str) -> SummaryBuilder: ...

class SummaryBuilder(JavaWrapper):
    def __init__(self, jSummaryBuilder: JavaObject) -> None: ...
    def summary(self, featuresCol: Column, weightCol: Column | None = None) -> Column: ...

class MultivariateGaussian:
    mean: Incomplete
    cov: Incomplete
    def __init__(self, mean: Vector, cov: Matrix) -> None: ...

import abc
from abc import ABCMeta, abstractmethod
from pyspark.pandas._typing import FrameLike as FrameLike
from pyspark.pandas.groupby import DataFrameGroupBy as DataFrameGroupBy, GroupBy as GroupBy
from pyspark.pandas.internal import NATURAL_ORDER_COLUMN_NAME as NATURAL_ORDER_COLUMN_NAME, SPARK_INDEX_NAME_FORMAT as SPARK_INDEX_NAME_FORMAT
from pyspark.pandas.missing.window import MissingPandasLikeExpanding as MissingPandasLikeExpanding, MissingPandasLikeExpandingGroupby as MissingPandasLikeExpandingGroupby, MissingPandasLikeExponentialMoving as MissingPandasLikeExponentialMoving, MissingPandasLikeExponentialMovingGroupby as MissingPandasLikeExponentialMovingGroupby, MissingPandasLikeRolling as MissingPandasLikeRolling, MissingPandasLikeRollingGroupby as MissingPandasLikeRollingGroupby
from pyspark.pandas.utils import scol_for as scol_for
from pyspark.sql import Window as Window
from pyspark.sql.column import Column as Column
from pyspark.sql.types import DoubleType as DoubleType
from pyspark.sql.window import WindowSpec as WindowSpec
from typing import Any, Generic

class RollingAndExpanding(Generic[FrameLike], metaclass=ABCMeta):
    def __init__(self, window: WindowSpec, min_periods: int) -> None: ...
    @abstractmethod
    def count(self) -> FrameLike: ...
    def sum(self) -> FrameLike: ...
    def min(self) -> FrameLike: ...
    def max(self) -> FrameLike: ...
    def mean(self) -> FrameLike: ...
    def quantile(self, q: float, accuracy: int = 10000) -> FrameLike: ...
    def std(self) -> FrameLike: ...
    def var(self) -> FrameLike: ...
    def skew(self) -> FrameLike: ...
    def kurt(self) -> FrameLike: ...

class RollingLike(RollingAndExpanding[FrameLike], metaclass=abc.ABCMeta):
    def __init__(self, window: int, min_periods: int | None = None) -> None: ...
    def count(self) -> FrameLike: ...

class Rolling(RollingLike[FrameLike]):
    def __init__(self, psdf_or_psser: FrameLike, window: int, min_periods: int | None = None) -> None: ...
    def __getattr__(self, item: str) -> Any: ...
    def count(self) -> FrameLike: ...
    def sum(self) -> FrameLike: ...
    def min(self) -> FrameLike: ...
    def max(self) -> FrameLike: ...
    def mean(self) -> FrameLike: ...
    def quantile(self, quantile: float, accuracy: int = 10000) -> FrameLike: ...
    def std(self) -> FrameLike: ...
    def var(self) -> FrameLike: ...
    def skew(self) -> FrameLike: ...
    def kurt(self) -> FrameLike: ...

class RollingGroupby(RollingLike[FrameLike]):
    def __init__(self, groupby: GroupBy[FrameLike], window: int, min_periods: int | None = None) -> None: ...
    def __getattr__(self, item: str) -> Any: ...
    def count(self) -> FrameLike: ...
    def sum(self) -> FrameLike: ...
    def min(self) -> FrameLike: ...
    def max(self) -> FrameLike: ...
    def mean(self) -> FrameLike: ...
    def quantile(self, quantile: float, accuracy: int = 10000) -> FrameLike: ...
    def std(self) -> FrameLike: ...
    def var(self) -> FrameLike: ...
    def skew(self) -> FrameLike: ...
    def kurt(self) -> FrameLike: ...

class ExpandingLike(RollingAndExpanding[FrameLike], metaclass=abc.ABCMeta):
    def __init__(self, min_periods: int = 1) -> None: ...
    def count(self) -> FrameLike: ...

class Expanding(ExpandingLike[FrameLike]):
    def __init__(self, psdf_or_psser: FrameLike, min_periods: int = 1) -> None: ...
    def __getattr__(self, item: str) -> Any: ...
    def count(self) -> FrameLike: ...
    def sum(self) -> FrameLike: ...
    def min(self) -> FrameLike: ...
    def max(self) -> FrameLike: ...
    def mean(self) -> FrameLike: ...
    def quantile(self, quantile: float, accuracy: int = 10000) -> FrameLike: ...
    def std(self) -> FrameLike: ...
    def var(self) -> FrameLike: ...
    def skew(self) -> FrameLike: ...
    def kurt(self) -> FrameLike: ...

class ExpandingGroupby(ExpandingLike[FrameLike]):
    def __init__(self, groupby: GroupBy[FrameLike], min_periods: int = 1) -> None: ...
    def __getattr__(self, item: str) -> Any: ...
    def count(self) -> FrameLike: ...
    def sum(self) -> FrameLike: ...
    def min(self) -> FrameLike: ...
    def max(self) -> FrameLike: ...
    def mean(self) -> FrameLike: ...
    def quantile(self, quantile: float, accuracy: int = 10000) -> FrameLike: ...
    def std(self) -> FrameLike: ...
    def var(self) -> FrameLike: ...
    def skew(self) -> FrameLike: ...
    def kurt(self) -> FrameLike: ...

class ExponentialMovingLike(Generic[FrameLike], metaclass=ABCMeta):
    def __init__(self, window: WindowSpec, com: float | None = None, span: float | None = None, halflife: float | None = None, alpha: float | None = None, min_periods: int | None = None, ignore_na: bool = False) -> None: ...
    def mean(self) -> FrameLike: ...

class ExponentialMoving(ExponentialMovingLike[FrameLike]):
    def __init__(self, psdf_or_psser: FrameLike, com: float | None = None, span: float | None = None, halflife: float | None = None, alpha: float | None = None, min_periods: int | None = None, ignore_na: bool = False) -> None: ...
    def __getattr__(self, item: str) -> Any: ...
    def mean(self) -> FrameLike: ...

class ExponentialMovingGroupby(ExponentialMovingLike[FrameLike]):
    def __init__(self, groupby: GroupBy[FrameLike], com: float | None = None, span: float | None = None, halflife: float | None = None, alpha: float | None = None, min_periods: int | None = None, ignore_na: bool = False) -> None: ...
    def __getattr__(self, item: str) -> Any: ...
    def mean(self) -> FrameLike: ...

import pyspark.pandas as ps
from pandas.tseries.offsets import DateOffset as DateOffset
from pyspark.sql.types import DateType as DateType, LongType as LongType, TimestampNTZType as TimestampNTZType, TimestampType as TimestampType
from typing import Any

class DatetimeMethods:
    def __init__(self, series: ps.Series) -> None: ...
    @property
    def date(self) -> ps.Series: ...
    @property
    def time(self) -> ps.Series: ...
    @property
    def timetz(self) -> ps.Series: ...
    @property
    def year(self) -> ps.Series: ...
    @property
    def month(self) -> ps.Series: ...
    @property
    def day(self) -> ps.Series: ...
    @property
    def hour(self) -> ps.Series: ...
    @property
    def minute(self) -> ps.Series: ...
    @property
    def second(self) -> ps.Series: ...
    @property
    def microsecond(self) -> ps.Series: ...
    @property
    def nanosecond(self) -> ps.Series: ...
    @property
    def week(self) -> ps.Series: ...
    @property
    def weekofyear(self) -> ps.Series: ...
    @property
    def dayofweek(self) -> ps.Series: ...
    @property
    def weekday(self) -> ps.Series: ...
    @property
    def dayofyear(self) -> ps.Series: ...
    @property
    def quarter(self) -> ps.Series: ...
    @property
    def is_month_start(self) -> ps.Series: ...
    @property
    def is_month_end(self) -> ps.Series: ...
    @property
    def is_quarter_start(self) -> ps.Series: ...
    @property
    def is_quarter_end(self) -> ps.Series: ...
    @property
    def is_year_start(self) -> ps.Series: ...
    @property
    def is_year_end(self) -> ps.Series: ...
    @property
    def is_leap_year(self) -> ps.Series: ...
    @property
    def daysinmonth(self) -> ps.Series: ...
    @property
    def days_in_month(self) -> ps.Series: ...
    def tz_localize(self, tz) -> None: ...
    def tz_convert(self, tz) -> None: ...
    def normalize(self) -> ps.Series: ...
    def strftime(self, date_format: str) -> ps.Series: ...
    def round(self, freq: str | DateOffset, *args: Any, **kwargs: Any) -> ps.Series: ...
    def floor(self, freq: str | DateOffset, *args: Any, **kwargs: Any) -> ps.Series: ...
    def ceil(self, freq: str | DateOffset, *args: Any, **kwargs: Any) -> ps.Series: ...
    def month_name(self, locale: str | None = None) -> ps.Series: ...
    def day_name(self, locale: str | None = None) -> ps.Series: ...

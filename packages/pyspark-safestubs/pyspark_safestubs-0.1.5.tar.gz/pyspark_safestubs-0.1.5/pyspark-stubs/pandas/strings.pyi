import pyspark.pandas as ps
from _typeshed import Incomplete
from pyspark.sql.functions import pandas_udf as pandas_udf
from pyspark.sql.types import ArrayType as ArrayType, BinaryType as BinaryType, LongType as LongType, MapType as MapType, StringType as StringType
from typing import Any, Callable

class StringMethods:
    def __init__(self, series: ps.Series) -> None: ...
    def capitalize(self) -> ps.Series: ...
    def title(self) -> ps.Series: ...
    def lower(self) -> ps.Series: ...
    def upper(self) -> ps.Series: ...
    def swapcase(self) -> ps.Series: ...
    def startswith(self, pattern: str, na: Any | None = None) -> ps.Series: ...
    def endswith(self, pattern: str, na: Any | None = None) -> ps.Series: ...
    def strip(self, to_strip: str | None = None) -> ps.Series: ...
    def lstrip(self, to_strip: str | None = None) -> ps.Series: ...
    def rstrip(self, to_strip: str | None = None) -> ps.Series: ...
    def get(self, i: int) -> ps.Series: ...
    def isalnum(self) -> ps.Series: ...
    def isalpha(self) -> ps.Series: ...
    def isdigit(self) -> ps.Series: ...
    def isspace(self) -> ps.Series: ...
    def islower(self) -> ps.Series: ...
    def isupper(self) -> ps.Series: ...
    def istitle(self) -> ps.Series: ...
    def isnumeric(self) -> ps.Series: ...
    def isdecimal(self) -> ps.Series: ...
    def cat(self, others: Incomplete | None = None, sep: Incomplete | None = None, na_rep: Incomplete | None = None, join: Incomplete | None = None) -> None: ...
    def center(self, width: int, fillchar: str = ' ') -> ps.Series: ...
    def contains(self, pat: str, case: bool = True, flags: int = 0, na: Any = None, regex: bool = True) -> ps.Series: ...
    def count(self, pat: str, flags: int = 0) -> ps.Series: ...
    def decode(self, encoding, errors: str = 'strict') -> None: ...
    def encode(self, encoding, errors: str = 'strict') -> None: ...
    def extract(self, pat, flags: int = 0, expand: bool = True) -> None: ...
    def extractall(self, pat, flags: int = 0) -> None: ...
    def find(self, sub: str, start: int = 0, end: int | None = None) -> ps.Series: ...
    def findall(self, pat: str, flags: int = 0) -> ps.Series: ...
    def index(self, sub: str, start: int = 0, end: int | None = None) -> ps.Series: ...
    def join(self, sep: str) -> ps.Series: ...
    def len(self) -> ps.Series: ...
    def ljust(self, width: int, fillchar: str = ' ') -> ps.Series: ...
    def match(self, pat: str, case: bool = True, flags: int = 0, na: Any = ...) -> ps.Series: ...
    def normalize(self, form: str) -> ps.Series: ...
    def pad(self, width: int, side: str = 'left', fillchar: str = ' ') -> ps.Series: ...
    def partition(self, sep: str = ' ', expand: bool = True) -> ps.Series: ...
    def repeat(self, repeats: int) -> ps.Series: ...
    def replace(self, pat: str, repl: str | Callable[[str], str], n: int = -1, case: bool | None = None, flags: int = 0, regex: bool = True) -> ps.Series: ...
    def rfind(self, sub: str, start: int = 0, end: int | None = None) -> ps.Series: ...
    def rindex(self, sub: str, start: int = 0, end: int | None = None) -> ps.Series: ...
    def rjust(self, width: int, fillchar: str = ' ') -> ps.Series: ...
    def rpartition(self, sep: str = ' ', expand: bool = True) -> ps.Series: ...
    def slice(self, start: int | None = None, stop: int | None = None, step: int | None = None) -> ps.Series: ...
    def slice_replace(self, start: int | None = None, stop: int | None = None, repl: str | None = None) -> ps.Series: ...
    def split(self, pat: str | None = None, n: int = -1, expand: bool = False) -> ps.Series | ps.DataFrame: ...
    def rsplit(self, pat: str | None = None, n: int = -1, expand: bool = False) -> ps.Series | ps.DataFrame: ...
    def translate(self, table: dict) -> ps.Series: ...
    def wrap(self, width: int, **kwargs: bool) -> ps.Series: ...
    def zfill(self, width: int) -> ps.Series: ...
    def get_dummies(self, sep: str = '|') -> None: ...

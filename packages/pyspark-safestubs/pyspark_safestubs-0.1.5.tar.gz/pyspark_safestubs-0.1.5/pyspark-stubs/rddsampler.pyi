from _typeshed import Incomplete
from collections.abc import Generator

class RDDSamplerBase:
    def __init__(self, withReplacement, seed: Incomplete | None = None) -> None: ...
    def initRandomGenerator(self, split) -> None: ...
    def getUniformSample(self): ...
    def getPoissonSample(self, mean): ...
    def func(self, split, iterator) -> None: ...

class RDDSampler(RDDSamplerBase):
    def __init__(self, withReplacement, fraction, seed: Incomplete | None = None) -> None: ...
    def func(self, split, iterator) -> Generator[Incomplete]: ...

class RDDRangeSampler(RDDSamplerBase):
    def __init__(self, lowerBound, upperBound, seed: Incomplete | None = None) -> None: ...
    def func(self, split, iterator) -> Generator[Incomplete]: ...

class RDDStratifiedSampler(RDDSamplerBase):
    def __init__(self, withReplacement, fractions, seed: Incomplete | None = None) -> None: ...
    def func(self, split, iterator) -> Generator[Incomplete]: ...

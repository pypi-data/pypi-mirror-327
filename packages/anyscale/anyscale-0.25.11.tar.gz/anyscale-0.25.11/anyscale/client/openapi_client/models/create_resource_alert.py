# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CreateResourceAlert(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'cloud_id': 'str',
        'project_id': 'str',
        'user_id': 'str',
        'alert_events': 'list[ResourceAlertEventType]',
        'notification_channel': 'CreateNotificationChannelRecord'
    }

    attribute_map = {
        'name': 'name',
        'cloud_id': 'cloud_id',
        'project_id': 'project_id',
        'user_id': 'user_id',
        'alert_events': 'alert_events',
        'notification_channel': 'notification_channel'
    }

    def __init__(self, name=None, cloud_id=None, project_id=None, user_id=None, alert_events=None, notification_channel=None, local_vars_configuration=None):  # noqa: E501
        """CreateResourceAlert - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._cloud_id = None
        self._project_id = None
        self._user_id = None
        self._alert_events = None
        self._notification_channel = None
        self.discriminator = None

        self.name = name
        self.cloud_id = cloud_id
        if project_id is not None:
            self.project_id = project_id
        if user_id is not None:
            self.user_id = user_id
        self.alert_events = alert_events
        if notification_channel is not None:
            self.notification_channel = notification_channel

    @property
    def name(self):
        """Gets the name of this CreateResourceAlert.  # noqa: E501

        The name of this resource alert.  # noqa: E501

        :return: The name of this CreateResourceAlert.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateResourceAlert.

        The name of this resource alert.  # noqa: E501

        :param name: The name of this CreateResourceAlert.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cloud_id(self):
        """Gets the cloud_id of this CreateResourceAlert.  # noqa: E501

        The ID of the cloud that this resource alert applies to.  # noqa: E501

        :return: The cloud_id of this CreateResourceAlert.  # noqa: E501
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this CreateResourceAlert.

        The ID of the cloud that this resource alert applies to.  # noqa: E501

        :param cloud_id: The cloud_id of this CreateResourceAlert.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cloud_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_id`, must not be `None`")  # noqa: E501

        self._cloud_id = cloud_id

    @property
    def project_id(self):
        """Gets the project_id of this CreateResourceAlert.  # noqa: E501

        The ID of the project that this resource alert applies to.  # noqa: E501

        :return: The project_id of this CreateResourceAlert.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this CreateResourceAlert.

        The ID of the project that this resource alert applies to.  # noqa: E501

        :param project_id: The project_id of this CreateResourceAlert.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def user_id(self):
        """Gets the user_id of this CreateResourceAlert.  # noqa: E501

        The ID of the user that this resource alert applies to.  # noqa: E501

        :return: The user_id of this CreateResourceAlert.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CreateResourceAlert.

        The ID of the user that this resource alert applies to.  # noqa: E501

        :param user_id: The user_id of this CreateResourceAlert.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def alert_events(self):
        """Gets the alert_events of this CreateResourceAlert.  # noqa: E501

        The event types to alert on.  # noqa: E501

        :return: The alert_events of this CreateResourceAlert.  # noqa: E501
        :rtype: list[ResourceAlertEventType]
        """
        return self._alert_events

    @alert_events.setter
    def alert_events(self, alert_events):
        """Sets the alert_events of this CreateResourceAlert.

        The event types to alert on.  # noqa: E501

        :param alert_events: The alert_events of this CreateResourceAlert.  # noqa: E501
        :type: list[ResourceAlertEventType]
        """
        if self.local_vars_configuration.client_side_validation and alert_events is None:  # noqa: E501
            raise ValueError("Invalid value for `alert_events`, must not be `None`")  # noqa: E501

        self._alert_events = alert_events

    @property
    def notification_channel(self):
        """Gets the notification_channel of this CreateResourceAlert.  # noqa: E501

        The notification channel that this resource alert sends notification to.  # noqa: E501

        :return: The notification_channel of this CreateResourceAlert.  # noqa: E501
        :rtype: CreateNotificationChannelRecord
        """
        return self._notification_channel

    @notification_channel.setter
    def notification_channel(self, notification_channel):
        """Sets the notification_channel of this CreateResourceAlert.

        The notification channel that this resource alert sends notification to.  # noqa: E501

        :param notification_channel: The notification_channel of this CreateResourceAlert.  # noqa: E501
        :type: CreateNotificationChannelRecord
        """

        self._notification_channel = notification_channel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateResourceAlert):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateResourceAlert):
            return True

        return self.to_dict() != other.to_dict()

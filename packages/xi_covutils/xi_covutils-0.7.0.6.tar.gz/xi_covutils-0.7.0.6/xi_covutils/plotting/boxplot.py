"""
Themes for Boxplots
"""
from abc import abstractmethod
from typing import Optional, cast, runtime_checkable, Any
import numpy as np
from typing_extensions import Protocol
from matplotlib import patches, lines
from matplotlib.axes import Axes
from matplotlib.figure import Figure
from pipe import map as pmap

from xi_covutils.plotting.background import (
  BackgroundTheme,
  LightColorSquaredBackground
)
from xi_covutils.plotting.grouper import ElementGrouper, ElementGrouperSimple


@runtime_checkable
class SupportsGetItem(Protocol): # pylint: disable=too-few-public-methods
  """An ABC with one abstract method __getitem__."""
  @abstractmethod
  def __getitem__(self, key: Any, /) -> Any:
    pass


# pylint: disable=too-many-instance-attributes
class PlainColorBoxplotTheme:
  """
  Plain Boxplot Theme
  """
  # pylint: disable=too-many-arguments
  def __init__(
      self,
      axis: Axes,
      figure: Optional[Figure],
      data: list[list[float]],
      colors:SupportsGetItem,
      size:Optional[int] = None,
      showfliers=False,
      groups: Optional[list[int]] = None,
    ):
    self.axis = axis
    self.colors = colors
    self.showfliers = showfliers
    self.index_counter = 0
    self.size = size
    self.groups = groups
    self.data = data
    self.figure = figure
    self.background:Optional[BackgroundTheme] = None
    self.tickgrouper:Optional[ElementGrouper] = None
    if self.groups is None and self.size is None:
      raise ValueError("Either groups or size must be provided")

  def get_size(self) -> int:
    """
    Retrieves the number of boxplots to be drawn.
    """
    if self.size is not None:
      return self.size
    if self.groups is not None:
      return sum(self.groups)
    return 0

  def get_groups(self) -> list[int]:
    """
    Get the number of elements in each group.

    Returns:
      list[int]: The number of elements in each group.
    """
    if self.groups is not None:
      return self.groups
    if self.size is not None:
      return [1 for _ in range(self.size)]
    return []

  def set_tickgrouper(self, tickgrouper: ElementGrouper):
    """
    Assign a tickgrouper to the boxplot.
    """
    self.tickgrouper = tickgrouper

  def _get_tickgrouper(self) -> ElementGrouper:
    """
    Get a tickgrouper to layout the ticks of the boxplot
    """
    if self.tickgrouper is None:
      return ElementGrouperSimple(
        groups=self.get_groups(),
        shrinking=0.3
      )
    return self.tickgrouper

  def set_background(self, background: BackgroundTheme):
    """
    Assign a background to the boxplot.
    """
    self.background = background

  def _get_background(self) -> BackgroundTheme:
    """
    Get the background theme for the boxplot.

    Returns:
      BackgroundTheme: The background theme for the boxplot.
    """
    if self.background is None:
      return LightColorSquaredBackground()
    return self.background

  def _adjust_theme(self, boxplot_elements:dict[str, list[lines.Line2D]]):
    """
    Modifies the boxplot elements to match the theme.

    Args:
      bp (dict[str, list[Artist]]): The boxplot elements as generated by the
        axis.boxplot method.
    """
    for _ in range(self.get_size()):
      self._set_boxcolor(boxplot_elements)
      self._set_median_colors(boxplot_elements)
      self._set_capcolors(boxplot_elements)
      self._set_whiskercolors(boxplot_elements)
      self.index_counter += 1

  def _set_boxcolor(self, boxplot_elements:dict[str, list[lines.Line2D]]):
    """
    Sets the colors of each box artist in a boxplot.

    Args:
      bp (dict[str, list[Artist]]): The boxplot elements as generated by the
        axis.boxplot method.
    """
    color = self.colors[self.index_counter]
    patch = boxplot_elements["boxes"][self.index_counter]
    patch = cast(patches.PathPatch, patch)
    patch.set_facecolor(color)
    patch.set_linewidth(0)

  def _set_median_colors(self, boxplot_elements:dict[str, list[lines.Line2D]]):
    """
    Set the color of the median line in a boxplot.

    Args:
      bp (dict[str, list[Artist]]): The boxplot elements as generated by the
        axis.boxplot method.
    """
    line = boxplot_elements["medians"][self.index_counter]
    line = cast(lines.Line2D, line)
    line.set_color("white")
    line.set_linewidth(2)

  def _set_capcolors(self, boxplot_elements:dict[str, list[lines.Line2D]]):
    """
    Set the color of the caps in a boxplot.

    Args:
      bp (dict[str, list[Artist]]): The boxplot elements as generated by the
        axis.boxplot method.
    """
    color = self.colors[self.index_counter]
    for index in range(2*self.index_counter, 2*self.index_counter+2):
      line = boxplot_elements["caps"][index]
      line = cast(lines.Line2D, line)
      line.set_color(color)
      line.set_linewidth(2)

  def _set_whiskercolors(self, boxplot_elements:dict[str, list[lines.Line2D]]):
    """
    Set the color of the whiskers in a boxplot.

    Args:
      bp (dict[str, list[Artist]]): The boxplot elements as generated by the
        axis.boxplot method.
    """
    color = self.colors[self.index_counter]
    for index in range(2*self.index_counter, 2*self.index_counter+2):
      line = boxplot_elements["whiskers"][index]
      line = cast(lines.Line2D, line)
      line.set_color(color)
      line.set_linewidth(2)

  def __enter__(self):
    grouper = self._get_tickgrouper()
    positions = grouper.get_element_positions()
    xticks = grouper.get_group_positions()
    boxp = self.axis.boxplot(
      self.data,
      positions = positions,
      showfliers = self.showfliers,
      patch_artist=True,
    )
    self.axis.set_xticks(xticks)
    self._adjust_theme(boxp)

  def __exit__(self, exc_type, exc_value, traceback):
    for spine in self.axis.spines.values():
      spine.set_visible(False)
    if self.figure is not None:
      self.figure.tight_layout()
    self._get_background().draw_background(self.axis)

def precompute_boxplot_data(
  data: np.ndarray,
  include_fliers: bool = False
):
  """
  A simple function that computes the required data to show in a boxplot.
  """
  q1 = np.percentile(data, 25)
  q2 = np.percentile(data, 50)
  q3 = np.percentile(data, 75)
  iqr = q3 - q1
  lower_whisker = q1 - 1.5*iqr
  upper_whisker = q3 + 1.5*iqr
  data_within_whiskers = data[(data<=upper_whisker) & (data>=lower_whisker)]
  if include_fliers:
    fliers = data[(data>upper_whisker) | (data<lower_whisker)].tolist()
  else:
    fliers = []
  return {
    "whislo": min(data_within_whiskers),
    "q1": q1,
    "med": q2,
    "q3": q3,
    "whishi": max(data_within_whiskers),
    "fliers": fliers
  }

class PlainColorBoxplotPrecomputedTheme:
  """
  Plain Boxplot Theme, from precomputed data.
  """
  # pylint: disable=too-many-positional-arguments
  def __init__(
      self,
      axis: Axes,
      figure: Optional[Figure],
      data: list[dict[str, Any]],
      colors:SupportsGetItem,
      size:Optional[int] = None,
      showfliers=False,
      groups: Optional[list[int]] = None,
    ):
    self.axis = axis
    self.colors = colors
    self.showfliers = showfliers
    self.index_counter = 0
    self.size = size
    self.groups = groups
    self.data = data
    self.figure = figure
    self.background:Optional[BackgroundTheme] = None
    self.tickgrouper:Optional[ElementGrouper] = None
    if self.groups is None and self.size is None:
      raise ValueError("Either groups or size must be provided")
    self.computed_elements:dict[str, Any] = {}

  def get_size(self) -> int:
    """
    Retrieves the number of boxplots to be drawn.
    """
    if self.size is not None:
      return self.size
    if self.groups is not None:
      return sum(self.groups)
    return 0

  def get_groups(self) -> list[int]:
    """
    Get the number of elements in each group.

    Returns:
      list[int]: The number of elements in each group.
    """
    if self.groups is not None:
      return self.groups
    if self.size is not None:
      return [1 for _ in range(self.size)]
    return []

  def set_tickgrouper(self, tickgrouper: ElementGrouper):
    """
    Assign a tickgrouper to the boxplot.
    """
    self.tickgrouper = tickgrouper

  def _get_tickgrouper(self) -> ElementGrouper:
    """
    Get a tickgrouper to layout the ticks of the boxplot
    """
    if self.tickgrouper is None:
      return ElementGrouperSimple(
        groups=self.get_groups(),
        shrinking=0.3
      )
    return self.tickgrouper

  def set_background(self, background: BackgroundTheme):
    """
    Assign a background to the boxplot.
    """
    self.background = background

  def _get_background(self) -> BackgroundTheme:
    """
    Get the background theme for the boxplot.

    Returns:
      BackgroundTheme: The background theme for the boxplot.
    """
    if self.background is None:
      return LightColorSquaredBackground()
    return self.background

  def _adjust_theme(self, boxplot_elements:dict[str, list[lines.Line2D]]):
    """
    Modifies the boxplot elements to match the theme.

    Args:
      bp (dict[str, list[Artist]]): The boxplot elements as generated by the
        axis.boxplot method.
    """
    for _ in range(self.get_size()):
      self._set_boxcolor(boxplot_elements)
      self._set_median_colors(boxplot_elements)
      self._set_capcolors(boxplot_elements)
      self._set_whiskercolors(boxplot_elements)
      self.index_counter += 1

  def _set_boxcolor(self, boxplot_elements:dict[str, list[lines.Line2D]]):
    """
    Sets the colors of each box artist in a boxplot.

    Args:
      bp (dict[str, list[Artist]]): The boxplot elements as generated by the
        axis.boxplot method.
    """
    color = self.colors[self.index_counter]
    patch = boxplot_elements["boxes"][self.index_counter]
    patch = cast(patches.PathPatch, patch)
    patch.set_facecolor(color)
    patch.set_linewidth(0)

  def _set_median_colors(self, boxplot_elements:dict[str, list[lines.Line2D]]):
    """
    Set the color of the median line in a boxplot.

    Args:
      bp (dict[str, list[Artist]]): The boxplot elements as generated by the
        axis.boxplot method.
    """
    line = boxplot_elements["medians"][self.index_counter]
    line = cast(lines.Line2D, line)
    line.set_color("white")
    line.set_linewidth(2)

  def _set_capcolors(self, boxplot_elements:dict[str, list[lines.Line2D]]):
    """
    Set the color of the caps in a boxplot.

    Args:
      bp (dict[str, list[Artist]]): The boxplot elements as generated by the
        axis.boxplot method.
    """
    color = self.colors[self.index_counter]
    for index in range(2*self.index_counter, 2*self.index_counter+2):
      line = boxplot_elements["caps"][index]
      line = cast(lines.Line2D, line)
      line.set_color(color)
      line.set_linewidth(2)

  def _set_whiskercolors(self, boxplot_elements:dict[str, list[lines.Line2D]]):
    """
    Set the color of the whiskers in a boxplot.

    Args:
      bp (dict[str, list[Artist]]): The boxplot elements as generated by the
        axis.boxplot method.
    """
    color = self.colors[self.index_counter]
    for index in range(2*self.index_counter, 2*self.index_counter+2):
      line = boxplot_elements["whiskers"][index]
      line = cast(lines.Line2D, line)
      line.set_color(color)
      line.set_linewidth(2)

  def __enter__(self):
    grouper = self._get_tickgrouper()
    positions = grouper.get_element_positions()
    xticks = grouper.get_group_positions()
    boxp = self.axis.bxp(
      self.data,
      positions = positions,
      showfliers = self.showfliers,
      patch_artist=True,
    )
    self.computed_elements = boxp
    self.axis.set_xticks(xticks)
    self._adjust_theme(boxp)

  def __exit__(self, exc_type, exc_value, traceback):
    for spine in self.axis.spines.values():
      spine.set_visible(False)
    if self.figure is not None:
      self.figure.tight_layout()
    self._get_background().draw_background(self.axis)

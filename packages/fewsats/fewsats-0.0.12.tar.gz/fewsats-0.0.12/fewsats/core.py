"""Client for interacting with the Fewsats API"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Fewsats']

# %% ../nbs/00_core.ipynb 2
from fastcore.utils import *
import os
import httpx
from typing import Dict, Any, List
from time import time, sleep
import json
from httpx import HTTPError

# %% ../nbs/00_core.ipynb 6
class Fewsats:
    "Client for interacting with the Fewsats API"
    def __init__(self,
                 api_key: str = None, # The API key for the Fewsats account
                 base_url: str = "https://hub-5n97k.ondigitalocean.app"): # The Fewsats API base URL
        self.api_key = api_key or os.environ.get("FEWSATS_API_KEY")
        if not self.api_key:
            raise ValueError("The api_key client option must be set either by passing api_key to the client or by setting the FEWSATS_API_KEY environment variable")
        self.base_url = base_url
        self._httpx_client = httpx.Client()
        self._httpx_client.headers.update({"Authorization": f"Token {self.api_key}"})


# %% ../nbs/00_core.ipynb 9
@patch
def _request(self: Fewsats, 
             method: str, # The HTTP method to use
             path: str, # The path to request
             **kwargs) -> Dict[str, Any]:
    "Makes an authenticated request to Fewsats API"
    url = f"{self.base_url}/{path}"
    return  self._httpx_client.request(method, url, **kwargs)

# %% ../nbs/00_core.ipynb 14
@patch
def me(self: Fewsats):
    "Retrieve the user's info."
    return self._request("GET", "v0/users/me")


# %% ../nbs/00_core.ipynb 17
@patch
def balance(self: Fewsats):
    "Retrieve the balance of the user's wallet."
    return self._request("GET", "v0/wallets")


# %% ../nbs/00_core.ipynb 20
@patch
def payment_methods(self: Fewsats) -> List[Dict[str, Any]]:
    "Retrieve the user's payment methods, raises an exception for error status codes."
    return self._request("GET", "v0/stripe/payment-methods")


# %% ../nbs/00_core.ipynb 24
@patch
def _preview_payment(self: Fewsats,
                    amount: str): # The amount in USD cents
    "Simulates a purchase, raises an exception for error status codes."
    assert amount.isdigit()
    return self._request("POST", "v0/l402/preview/purchase/amount", json={"amount_usd": amount})


# %% ../nbs/00_core.ipynb 27
@patch
def create_offers(self:Fewsats,
                 offers:List[Dict[str,Any]], # List of offer objects following OfferCreateV0 schema
) -> dict:
    "Create offers for L402 payment server"
    return self._request("POST", "v0/l402/offers", json={"offers": offers})

# %% ../nbs/00_core.ipynb 30
@patch
def get_payment_details(self:Fewsats,
                       payment_request_url:str,
                       offer_id:str,
                       payment_method:str,
                       payment_context_token:str,
                       ) -> dict:
    data = {"offer_id": offer_id, "payment_method": payment_method, "payment_context_token": payment_context_token}
    return httpx.post(payment_request_url, json=data)


# %% ../nbs/00_core.ipynb 33
@patch
def get_payment_status(self:Fewsats,
                       payment_context_token:str,
                       ) -> dict:
    return self._request("GET", f"v0/l402/payment-status?payment_context_token={payment_context_token}")

# %% ../nbs/00_core.ipynb 35
@patch
def set_webhook(self:Fewsats,
                       webhook_url:str,
                       ) -> dict:
    return self._request("POST", f"v0/users/webhook/set", json={"webhook_url": webhook_url})

# %% ../nbs/00_core.ipynb 38
@patch
def pay_lightning(self: Fewsats, 
                  invoice: str, # lightning invoice
                  amount: int, # amount in cents
                  currency: str = "USD", # currency
                  description: str = "" ): # description of the payment 
    "Pay for a lightning invoice"
    data = {
        "invoice": invoice,
        "amount": amount,
        "currency": currency,
        "description": description
    }
    return self._request("POST", "v0/l402/purchases/lightning", json=data)

# %% ../nbs/00_core.ipynb 42
@patch
def pay_offer(self:Fewsats,
        l402_offer: Dict, # a dictionary containing the response of an L402 endpoint
        payment_method:str = '', # preferred payment method (optional)
) -> dict: # payment status response
    """Pays an L402 response. Fewsats will choose payment method if left blank.
    If multiple offers are passed, the first one will be chosen.

    This method is not recommended for LLMs as they struggle with complex types like Dicts during
    function calling. This method should be used by a higher-level abstraction SDK that is in 
    turn exposed to the LLM, for example, with the `as_tools()` paradigm.

    Returns payment status response"""
    data = {"payment_method": payment_method, **l402_offer} if payment_method else l402_offer
    return self._request("POST", "v0/l402/purchases/from-offer", json=data)

# %% ../nbs/00_core.ipynb 46
@patch
def payment_info(self:Fewsats,
                  pid:str): # purchase id
    "Retrieve the details of a payment."
    return self._request("GET", f"v0/l402/purchases/{pid}")

# %% ../nbs/00_core.ipynb 49
@patch
def wait_for_settlement(self:Fewsats,
                        pid:str, # purchase id
                        max_interval:int=120, # maximum interval between checks in seconds
                        max_wait:int=600): # maximum total wait time in seconds
    "Wait for payment settlement with exponential backoff"
    start,wait = time(),1
    while time() - start < max_wait:
        r = self.payment_info(pid)
        r.raise_for_status()
        status = r['status']
        if status == 'success': return r
        if status == 'failed': raise ValueError(f"Payment {pid} failed")
        sleep(min(wait, max_interval))
        wait *= 2
    raise TimeoutError(f"Payment {pid} did not settle within {max_wait} seconds. Final status: {status}")

# %% ../nbs/00_core.ipynb 52
@patch
def as_tools(self:Fewsats):
    "Return list of available tools for AI agents"
    return [
        self.me,
        self.balance,
        self.payment_methods,
        self.pay_lightning,
        self.payment_info,
    ]

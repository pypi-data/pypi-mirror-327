Metadata-Version: 2.2
Name: pygoodpractices
Version: 0.1.0
Summary: A tool to set up pre-commit hooks automatically
Author: petudeveloper
License: Apache-2.0
Keywords: pre-commit,automation,best practices
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pre-commit
Requires-Dist: virtualenv>=20.0.0

# pygoodpractices

&#x20;&#x20;

`pygoodpractices` is a Python tool designed to automate the setup of pre-commit hooks and standard configuration files, promoting best practices in Python projects.

## Table of Contents

- [Features](#features)
- [Installation](#installation)
- [Usage](#usage)
- [Configuration Files](#configuration-files)
- [Contributing](#contributing)
- [License](#license)
- [Contact](#contact)

## Features

- Automatically generates configuration files:
  - `.pre-commit-config.yaml`
  - `.flake8`
  - `isort.cfg`
  - `pyproject.toml`
- Installs and initializes pre-commit hooks.
- Ensures code quality and consistency across projects.

## Installation

Ensure you have Python 3.6 or later installed. You can install `pygoodpractices` using `pip`:

```bash
pip install pygoodpractices
```

Alternatively, clone the repository and install it locally:

```bash
git clone https://github.com/yourusername/pygoodpractices.git
cd pygoodpractices
pip install .
```

## Usage

After installation, you can set up your project with the following commands:

```bash
setup-pygoodpractices
install-pygoodpractices
```

- `pygood-init`: Generates the necessary configuration files in your project directory and Installs and initializes the pre-commit hooks.
- `pygood --all`: Runs all pre-commit hooks on every file in the repository, ensuring code follows best practices before committing.
- `pygood --files <file1> <file2> <file3>`: Runs all pre-commit hooks on specified files , ensuring code follows best practices before committing.


## Configuration Files

The tool generates the following configuration files:

- ``: Configures pre-commit hooks.
- ``: Sets rules for Flake8, a Python linting tool.
- ``: Configures `isort` for sorting imports.
- ``: Contains project metadata and tool configurations.

Feel free to customize these files to fit your project's specific needs.

## Contributing

Contributions are welcome! Please follow these steps:

1. Fork the repository.
2. Create a new branch (`git checkout -b feature/YourFeature`).
3. Commit your changes (`git commit -m 'Add YourFeature'`).
4. Push to the branch (`git push origin feature/YourFeature`).
5. Open a Pull Request.

Ensure your code adheres to the existing style and passes all tests. For more details, see the [CONTRIBUTING.md](CONTRIBUTING.md) file.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

## Contact

For questions or suggestions, please open an issue or contact [petudeveloper](mailto\:your.email@example.com).


# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fireblocks.models.travel_rule_vasp import TravelRuleVASP


class TestTravelRuleVASP(unittest.TestCase):
    """TravelRuleVASP unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TravelRuleVASP:
        """Test TravelRuleVASP
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `TravelRuleVASP`
        """
        model = TravelRuleVASP()
        if include_optional:
            return TravelRuleVASP(
                did = '',
                name = '',
                verification_status = '',
                address_line1 = '',
                address_line2 = '',
                city = '',
                country = '',
                email_domains = '',
                website = '',
                logo = '',
                legal_structure = '',
                legal_name = '',
                year_founded = '',
                incorporation_country = '',
                is_regulated = '',
                other_names = '',
                identification_type = '',
                identification_country = '',
                business_number = '',
                regulatory_authorities = '',
                jurisdictions = '',
                street = '',
                number = '',
                unit = '',
                post_code = '',
                state = '',
                certificates = '',
                description = '',
                travel_rule_openvasp = '',
                travel_rule_sygna = '',
                travel_rule_trisa = '',
                travel_rule_trlight = '',
                travel_rule_email = '',
                travel_rule_trp = '',
                travel_rule_shyft = '',
                travel_rule_ustravelrulewg = '',
                created_at = '',
                created_by = '',
                updated_at = '',
                updated_by = '',
                last_sent_date = '',
                last_received_date = '',
                documents = '',
                has_admin = True,
                is_notifiable = True,
                issuers = fireblocks.models.travel_rule_issuers.TravelRuleIssuers(
                    year_founded = fireblocks.models.travel_rule_issuer.TravelRuleIssuer(
                        issuer_did = '', ), 
                    is_regulated = fireblocks.models.travel_rule_issuer.TravelRuleIssuer(
                        issuer_did = '', ), 
                    regulatory_authorities = , 
                    name = , 
                    logo = , 
                    website = , 
                    legal_name = , 
                    legal_structure = , 
                    incorporation_country = , 
                    business_number = , 
                    address_line1 = , 
                    city = , 
                    country = , 
                    description = , )
            )
        else:
            return TravelRuleVASP(
                did = '',
                name = '',
                verification_status = '',
                address_line1 = '',
                address_line2 = '',
                city = '',
                country = '',
                email_domains = '',
                website = '',
                logo = '',
                legal_structure = '',
                legal_name = '',
                year_founded = '',
                incorporation_country = '',
                is_regulated = '',
                other_names = '',
                identification_type = '',
                identification_country = '',
                business_number = '',
                regulatory_authorities = '',
                jurisdictions = '',
                street = '',
                number = '',
                unit = '',
                post_code = '',
                state = '',
                certificates = '',
                description = '',
                travel_rule_openvasp = '',
                travel_rule_sygna = '',
                travel_rule_trisa = '',
                travel_rule_trlight = '',
                travel_rule_email = '',
                travel_rule_trp = '',
                travel_rule_shyft = '',
                travel_rule_ustravelrulewg = '',
                created_at = '',
                created_by = '',
                updated_at = '',
                updated_by = '',
                last_sent_date = '',
                last_received_date = '',
                documents = '',
                has_admin = True,
                is_notifiable = True,
                issuers = fireblocks.models.travel_rule_issuers.TravelRuleIssuers(
                    year_founded = fireblocks.models.travel_rule_issuer.TravelRuleIssuer(
                        issuer_did = '', ), 
                    is_regulated = fireblocks.models.travel_rule_issuer.TravelRuleIssuer(
                        issuer_did = '', ), 
                    regulatory_authorities = , 
                    name = , 
                    logo = , 
                    website = , 
                    legal_name = , 
                    legal_structure = , 
                    incorporation_country = , 
                    business_number = , 
                    address_line1 = , 
                    city = , 
                    country = , 
                    description = , ),
        )
        """

    def testTravelRuleVASP(self):
        """Test TravelRuleVASP"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()

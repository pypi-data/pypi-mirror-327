# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from fireblocks.models.travel_rule_issuers import TravelRuleIssuers
from typing import Optional, Set
from typing_extensions import Self

class TravelRuleVASP(BaseModel):
    """
    TravelRuleVASP
    """ # noqa: E501
    did: StrictStr
    name: StrictStr
    verification_status: StrictStr = Field(alias="verificationStatus")
    address_line1: StrictStr = Field(alias="addressLine1")
    address_line2: StrictStr = Field(alias="addressLine2")
    city: StrictStr
    country: StrictStr
    email_domains: StrictStr = Field(alias="emailDomains")
    website: StrictStr
    logo: StrictStr
    legal_structure: StrictStr = Field(alias="legalStructure")
    legal_name: StrictStr = Field(alias="legalName")
    year_founded: StrictStr = Field(alias="yearFounded")
    incorporation_country: StrictStr = Field(alias="incorporationCountry")
    is_regulated: StrictStr = Field(alias="isRegulated")
    other_names: StrictStr = Field(alias="otherNames")
    identification_type: StrictStr = Field(alias="identificationType")
    identification_country: StrictStr = Field(alias="identificationCountry")
    business_number: StrictStr = Field(alias="businessNumber")
    regulatory_authorities: StrictStr = Field(alias="regulatoryAuthorities")
    jurisdictions: StrictStr
    street: StrictStr
    number: StrictStr
    unit: StrictStr
    post_code: StrictStr = Field(alias="postCode")
    state: StrictStr
    certificates: StrictStr
    description: StrictStr
    travel_rule_openvasp: StrictStr = Field(alias="travelRule_OPENVASP")
    travel_rule_sygna: StrictStr = Field(alias="travelRule_SYGNA")
    travel_rule_trisa: StrictStr = Field(alias="travelRule_TRISA")
    travel_rule_trlight: StrictStr = Field(alias="travelRule_TRLIGHT")
    travel_rule_email: StrictStr = Field(alias="travelRule_EMAIL")
    travel_rule_trp: StrictStr = Field(alias="travelRule_TRP")
    travel_rule_shyft: StrictStr = Field(alias="travelRule_SHYFT")
    travel_rule_ustravelrulewg: StrictStr = Field(alias="travelRule_USTRAVELRULEWG")
    created_at: StrictStr = Field(alias="createdAt")
    created_by: StrictStr = Field(alias="createdBy")
    updated_at: StrictStr = Field(alias="updatedAt")
    updated_by: StrictStr = Field(alias="updatedBy")
    last_sent_date: StrictStr = Field(alias="lastSentDate")
    last_received_date: StrictStr = Field(alias="lastReceivedDate")
    documents: StrictStr
    has_admin: StrictBool = Field(alias="hasAdmin")
    is_notifiable: StrictBool = Field(alias="isNotifiable")
    issuers: TravelRuleIssuers
    __properties: ClassVar[List[str]] = ["did", "name", "verificationStatus", "addressLine1", "addressLine2", "city", "country", "emailDomains", "website", "logo", "legalStructure", "legalName", "yearFounded", "incorporationCountry", "isRegulated", "otherNames", "identificationType", "identificationCountry", "businessNumber", "regulatoryAuthorities", "jurisdictions", "street", "number", "unit", "postCode", "state", "certificates", "description", "travelRule_OPENVASP", "travelRule_SYGNA", "travelRule_TRISA", "travelRule_TRLIGHT", "travelRule_EMAIL", "travelRule_TRP", "travelRule_SHYFT", "travelRule_USTRAVELRULEWG", "createdAt", "createdBy", "updatedAt", "updatedBy", "lastSentDate", "lastReceivedDate", "documents", "hasAdmin", "isNotifiable", "issuers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TravelRuleVASP from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of issuers
        if self.issuers:
            _dict['issuers'] = self.issuers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TravelRuleVASP from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "did": obj.get("did"),
            "name": obj.get("name"),
            "verificationStatus": obj.get("verificationStatus"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "emailDomains": obj.get("emailDomains"),
            "website": obj.get("website"),
            "logo": obj.get("logo"),
            "legalStructure": obj.get("legalStructure"),
            "legalName": obj.get("legalName"),
            "yearFounded": obj.get("yearFounded"),
            "incorporationCountry": obj.get("incorporationCountry"),
            "isRegulated": obj.get("isRegulated"),
            "otherNames": obj.get("otherNames"),
            "identificationType": obj.get("identificationType"),
            "identificationCountry": obj.get("identificationCountry"),
            "businessNumber": obj.get("businessNumber"),
            "regulatoryAuthorities": obj.get("regulatoryAuthorities"),
            "jurisdictions": obj.get("jurisdictions"),
            "street": obj.get("street"),
            "number": obj.get("number"),
            "unit": obj.get("unit"),
            "postCode": obj.get("postCode"),
            "state": obj.get("state"),
            "certificates": obj.get("certificates"),
            "description": obj.get("description"),
            "travelRule_OPENVASP": obj.get("travelRule_OPENVASP"),
            "travelRule_SYGNA": obj.get("travelRule_SYGNA"),
            "travelRule_TRISA": obj.get("travelRule_TRISA"),
            "travelRule_TRLIGHT": obj.get("travelRule_TRLIGHT"),
            "travelRule_EMAIL": obj.get("travelRule_EMAIL"),
            "travelRule_TRP": obj.get("travelRule_TRP"),
            "travelRule_SHYFT": obj.get("travelRule_SHYFT"),
            "travelRule_USTRAVELRULEWG": obj.get("travelRule_USTRAVELRULEWG"),
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "updatedAt": obj.get("updatedAt"),
            "updatedBy": obj.get("updatedBy"),
            "lastSentDate": obj.get("lastSentDate"),
            "lastReceivedDate": obj.get("lastReceivedDate"),
            "documents": obj.get("documents"),
            "hasAdmin": obj.get("hasAdmin"),
            "isNotifiable": obj.get("isNotifiable"),
            "issuers": TravelRuleIssuers.from_dict(obj["issuers"]) if obj.get("issuers") is not None else None
        })
        return _obj



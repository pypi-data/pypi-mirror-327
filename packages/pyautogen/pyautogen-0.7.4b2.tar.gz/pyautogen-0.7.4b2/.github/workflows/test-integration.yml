# This workflow will install Python dependencies and run tests with Python 3.11
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test integration

on:
  schedule:
    - cron: "0 0 * * *" # daily at midnight UTC
  workflow_dispatch: # allows manual triggering of the workflow
  pull_request_target:
    branches: ["main"]
  merge_group:
    types: [checks_requested]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}
permissions: {}

jobs:
  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      hasChanges: ${{ steps.filter.outputs.autogen == 'true' || steps.filter.outputs.test == 'true' || steps.filter.outputs.workflows == 'true' || steps.filter.outputs.setup == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            autogen:
              - "autogen/**"
            test:
              - "test/**"
            workflows:
              - ".github/workflows/**"
            setup:
              - "pyproject.toml"
      - name: autogen has changes
        run: echo "autogen has changes"
        if: steps.filter.outputs.autogen == 'true'
      - name: test has changes
        run: echo "test has changes"
        if: steps.filter.outputs.test == 'true'
      - name: workflows has changes
        run: echo "workflows has changes"
        if: steps.filter.outputs.workflows == 'true'
      - name: setup has changes
        run: echo "setup has changes"
        if: steps.filter.outputs.setup == 'true'

  test:
    needs: paths-filter
    if: needs.paths-filter.outputs.hasChanges == 'true'
    runs-on: ${{ matrix.os }}
    environment: openai1
    env:
      AUTOGEN_USE_DOCKER: ${{ matrix.os != 'ubuntu-latest'  && 'False' }}
    strategy:
      fail-fast: false
      matrix:
        # Add more optional dependencies if needed
        optional-dependencies:
          - "browser-use"
          - "crawl4ai"
          - "interop"
        os: [ubuntu-latest]
        # Run tests only for py versions 3.11
        python-version: ["3.11"]
        # Add more LLMs if needed
        llm: ["openai", "gemini", "anthropic", "deepseek"]

    steps:
      - name: Get User Permission
        id: checkAccess
        uses: actions-cool/check-user-permission@v2
        with:
          require: write
          username: ${{ github.triggering_actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check User Permission
        if: steps.checkAccess.outputs.require-result == 'false'
        run: |
          echo "${{ github.triggering_actor }} does not have permissions on this repo."
          echo "Current permission level is ${{ steps.checkAccess.outputs.user-permission }}"
          echo "Job originally triggered by ${{ github.actor }}"
          exit 1
      # checkout to pr branch
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install packages and dependencies
        if: matrix.llm == 'openai' || matrix.llm == 'deepseek'
        run: |
          uv pip install --system -e .[test,${{ matrix.optional-dependencies }}]
      - name: Install packages and dependencies
        if: matrix.llm != 'openai' && matrix.llm != 'deepseek'
        run: |
          uv pip install --system -e .[test,${{ matrix.optional-dependencies }},${{ matrix.llm }}]
      - name: Install playwright
        if: matrix.optional-dependencies == 'browser-use' || matrix.optional-dependencies == 'crawl4ai'
        run: |
          playwright install
      - name: Test with pytest using optional dependency marks
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_API_BASE: ${{ secrets.AZURE_OPENAI_API_BASE }}
          OAI_CONFIG_LIST: ${{ secrets.OAI_CONFIG_LIST }}
        run: |
          OPTIONAL_DEPENDENCIES="${{ matrix.optional-dependencies }}"
          MARKER="${OPTIONAL_DEPENDENCIES//-/_}"
          bash scripts/test.sh -m "$MARKER and ${{ matrix.llm }}"
      - name: Show coverage report
        run: bash scripts/show-coverage-report.sh
      - name: Upload coverage to Codecov
        if: ${{ !contains(github.ref, 'gh-readonly-queue/') }}
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: ${{ matrix.optional-dependencies }}, ${{ matrix.os }}, ${{ matrix.python-version }}
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  test-integration-check:
    if: always()
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Get Date
        shell: bash
        run: |
          echo "date=$(date +'%m/%d/%Y %H:%M:%S')" >> "$GITHUB_ENV"

      - name: Run Type is ${{ github.event_name }}
        if: ${{ github.event_name != 'schedule' && github.event_name != 'workflow_dispatch'}}
        shell: bash
        run: |
          echo "run_type=${{ github.event_name }}" >> "$GITHUB_ENV"

      - name: Fail workflow if build failed
        id: check_build_failed
        if: contains(join(needs.*.result, ','), 'failure')
        uses: actions/github-script@v7
        with:
          script: core.setFailed('Build Failed!')

      - name: Fail workflow if build cancelled
        id: check_build_cancelled
        if: contains(join(needs.*.result, ','), 'cancelled')
        uses: actions/github-script@v7
        with:
          script: core.setFailed('Build Cancelled!')

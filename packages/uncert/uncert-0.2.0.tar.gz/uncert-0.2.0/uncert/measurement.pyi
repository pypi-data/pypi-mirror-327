from __future__ import annotations
from typing import Any, TypeVar
from numpy.typing import ArrayLike, NDArray
from .uncertainty import Uncertainty

T = TypeVar('T', bound=float | NDArray[Any])

class Measurement:
    center: NDArray[Any]
    uncert: Uncertainty

    def __init__(
        self,
        center: float | ArrayLike,
        uncert: float | ArrayLike | Uncertainty,
        full_center: float | ArrayLike | None = None,
        full_uncert: float | ArrayLike | None = None
    ) -> None: ...

    def get_center(self) -> NDArray[Any]: ...
    def get_uncert(self) -> Uncertainty: ...
    def get_rounded_center(self) -> NDArray[Any]: ...
    def get_rounded_uncert(self) -> NDArray[Any]: ...
    def is_array_type(self) -> bool: ...

    def as_simple_list(self) -> Measurement | list[Measurement]: ...

    @classmethod
    def from_simple_list(cls, items: list[Measurement]) -> Measurement: ...

    def __iter__(self) -> Any: ...
    def __getitem__(self, idx: int | slice) -> Measurement: ...
    def __setitem__(self, idx: int | slice, value: Measurement | tuple[float, float]) -> None: ...
    def __delitem__(self, idx: int | slice) -> None: ...
    def __len__(self) -> int: ...

    def extend(self, other: Measurement) -> None: ...
    def append(self, other: Measurement) -> None: ...

    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

    def add_with_correlation(self, other: Measurement, r: float = 0.0) -> Measurement: ...
    def sub_with_correlation(self, other: Measurement, r: float = 0.0) -> Measurement: ...
    def mul_with_correlation(self, other: Measurement, r: float = 0.0) -> Measurement: ...
    def truediv_with_correlation(self, other: Measurement, r: float = 0.0) -> Measurement: ...

    def __add__(self, other: Measurement | float) -> Measurement: ...
    def __radd__(self, other: float) -> Measurement: ...
    def __sub__(self, other: Measurement | float) -> Measurement: ...
    def __rsub__(self, other: float) -> Measurement: ...
    def __mul__(self, other: Measurement | float) -> Measurement: ...
    def __rmul__(self, other: float) -> Measurement: ...
    def __truediv__(self, other: Measurement | float) -> Measurement: ...
    def __rtruediv__(self, other: float) -> Measurement: ...
    def __floordiv__(self, other: float) -> float: ...
    def __rfloordiv__(self, other: float) -> float: ...
    def __abs__(self) -> Measurement: ...

    def tscore(self, other: Measurement | float, r: float = 0.0) -> float: ...

    def __lt__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...

import os
import pytest

from oneenv import (
    oneenv,
    template,
    generate_env_example,
    diff,
    set_key,
    unset_key,
    dotenv_values,
    load_dotenv,
)
import oneenv as oneenv_module  # Used to clear the global registry

# Fixture to clear the template registry before each test
@pytest.fixture(autouse=True)
def clear_registry():
    oneenv_module._TEMPLATE_REGISTRY.clear()


# Define a sample template function for testing
@oneenv
def sample_template():
    """
    Returns a dictionary of environment variable settings for testing.
    """
    return {
        "TEST_VAR": {
            "description": "Test variable description.",
            "default": "value",
            "required": True,
            "choices": ["value", "other"]
        }
    }


def test_template_output():
    """
    Test that the generated template output contains expected lines:
    - The description
    - 'Required' if required is True
    - 'Choices: ...' if choices are provided
    - The variable assignment in the format DEFAULT=...
    """
    output = template()
    # Check for header and defined source
    assert "# Auto-generated by OneEnv" in output
    assert "# (Defined in: sample_template)" in output
    # Check description lines
    assert "# Test variable description." in output
    # Check for required and choices comments
    assert "# Required" in output
    assert "# Choices: value, other" in output
    # Check variable assignment
    assert "TEST_VAR=value" in output


def test_diff():
    """
    Test that diff() properly formats differences between texts.
    """
    previous_text = "TEST_VAR=old_value\n"
    current_text = "TEST_VAR=new_value\n"
    diff_output = diff(previous_text, current_text)
    # Expect a modification line in the format "~ old_line → new_line"
    expected_line = "~ TEST_VAR=old_value → TEST_VAR=new_value"
    assert expected_line in diff_output


def test_generate_env_example(tmp_path):
    """
    Test that generate_env_example() writes the same content as returned by template().
    """
    env_file = tmp_path / ".env.example"
    generate_env_example(str(env_file))
    written_content = env_file.read_text(encoding="utf-8")
    expected = template()
    assert written_content == expected


def test_set_and_unset_key(tmp_path):
    """
    Test set_key() and unset_key() functions by creating a temporary .env file,
    setting a key, updating it, then unsetting it.
    """
    env_file = tmp_path / ".env"
    # Start with an empty .env file
    env_file.write_text("", encoding="utf-8")
    
    # Set a key in the .env file and check content
    set_key(str(env_file), "MY_KEY", "123")
    content_after_set = env_file.read_text(encoding="utf-8")
    assert "MY_KEY=123" in content_after_set
    
    # Update the key value and check new content
    set_key(str(env_file), "MY_KEY", "456")
    content_after_update = env_file.read_text(encoding="utf-8")
    assert "MY_KEY=456" in content_after_update
    
    # Unset the key and verify it is removed
    unset_key(str(env_file), "MY_KEY")
    content_after_unset = env_file.read_text(encoding="utf-8")
    assert "MY_KEY=" not in content_after_unset


def test_dotenv_values(tmp_path):
    """
    Test that dotenv_values() correctly reads environment variables from a .env file.
    """
    env_file = tmp_path / ".env"
    env_file.write_text("MY_KEY=789\n", encoding="utf-8")
    values = dotenv_values(str(env_file))
    assert values["MY_KEY"] == "789"


def test_load_dotenv(tmp_path):
    """
    Test that load_dotenv() loads environment variables from a .env file into os.environ.
    """
    env_file = tmp_path / ".env"
    env_file.write_text("MY_LOAD_KEY=loaded_value\n", encoding="utf-8")
    # Ensure the environment variable is not already set
    if "MY_LOAD_KEY" in os.environ:
        del os.environ["MY_LOAD_KEY"]
    result = load_dotenv(str(env_file))
    assert result is True
    assert os.environ.get("MY_LOAD_KEY") == "loaded_value" 
# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
import datetime as dt
from .account_manager_response import AccountManagerResponse
from .group_user import GroupUser
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class GroupWithUsersResponse(UniversalBaseModel):
    name: str = pydantic.Field()
    """
    The name of the group
    """

    account: str = pydantic.Field()
    """
    The account of the group. Must be a valid domain, URL, or email. The account will be normalized to a canonical form.
    """

    thumbnail_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    The thumbnail URL of the group
    """

    analysis_email: typing.Optional[str] = pydantic.Field(default=None)
    """
    The email address for analysis to be sent to
    """

    data_api_access: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the group has access to the data API
    """

    id: int
    created_at: typing.Optional[dt.datetime] = None
    updated_at: typing.Optional[dt.datetime] = None
    is_archived: typing.Optional[bool] = None
    account_manager: typing.Optional[AccountManagerResponse] = None
    user_count: typing.Optional[int] = None
    deal_count: typing.Optional[int] = None
    users: typing.Optional[typing.List[GroupUser]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

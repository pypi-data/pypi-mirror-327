# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
from ..types.user_type import UserType
import typing
from ..types.frequency import Frequency
from ..core.request_options import RequestOptions
from ..types.contribution_response import ContributionResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper


class UnitEconomicsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_contribution(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ContributionResponse]:
        """
        Get the contribution for the user type.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ContributionResponse]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.unit_economics.get_contribution(
            group_id=1,
            deal_id=1,
            user_type="business",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/contribution",
            method="GET",
            params={
                "user_type": user_type,
                "freq": freq,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ContributionResponse],
                    parse_obj_as(
                        type_=typing.List[ContributionResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncUnitEconomicsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_contribution(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ContributionResponse]:
        """
        Get the contribution for the user type.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ContributionResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.unit_economics.get_contribution(
                group_id=1,
                deal_id=1,
                user_type="business",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/contribution",
            method="GET",
            params={
                "user_type": user_type,
                "freq": freq,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ContributionResponse],
                    parse_obj_as(
                        type_=typing.List[ContributionResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

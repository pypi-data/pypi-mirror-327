# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.file_type import FileType
from ..core.request_options import RequestOptions
from ..types.create_file_response import CreateFileResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.create_file_for_signed_url_response import CreateFileForSignedUrlResponse
from ..types.list_files_response import ListFilesResponse
from ..types.file_response import FileResponse
from ..types.gcs_signed_url_response import GcsSignedUrlResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FileClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def upload(
        self,
        group_id: int,
        deal_id: int,
        *,
        file: str,
        name: str,
        type: FileType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateFileResponse:
        """
        Parameters
        ----------
        group_id : int

        deal_id : int

        file : str
            The file to upload

        name : str
            Name of the file including extension

        type : FileType
            Type/category of the file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateFileResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.upload(
            group_id=1,
            deal_id=1,
            file="document.pdf",
            name="contract.pdf",
            type="deck",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file",
            method="POST",
            json={
                "file": file,
                "name": name,
                "type": type,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateFileResponse,
                    parse_obj_as(
                        type_=CreateFileResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_file_entry(
        self,
        group_id: int,
        deal_id: int,
        *,
        name: str,
        type: typing.Optional[FileType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateFileForSignedUrlResponse:
        """
        Create a new file entry for a specific group and deal. Requires the contents to be uploaded separately via signed-url.

        Parameters
        ----------
        group_id : int

        deal_id : int

        name : str
            The human-readable name of the file

        type : typing.Optional[FileType]
            The type of the file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateFileForSignedUrlResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.create_file_entry(
            group_id=1,
            deal_id=1,
            name="name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/entry",
            method="POST",
            json={
                "name": name,
                "type": type,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateFileForSignedUrlResponse,
                    parse_obj_as(
                        type_=CreateFileForSignedUrlResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self,
        group_id: int,
        deal_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListFilesResponse:
        """
        Get all files for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListFilesResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.list(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/all",
            method="GET",
            params={
                "sort_by": sort_by,
                "sort_order": sort_order,
                "page": page,
                "page_size": page_size,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListFilesResponse,
                    parse_obj_as(
                        type_=ListFilesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Get a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.get(
            group_id=1,
            deal_id=1,
            file_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FileResponse,
                    parse_obj_as(
                        type_=FileResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        type: typing.Optional[FileType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Update a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        type : typing.Optional[FileType]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.update(
            group_id=1,
            deal_id=1,
            file_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}",
            method="PUT",
            json={
                "type": type,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FileResponse,
                    parse_obj_as(
                        type_=FileResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.delete(
            group_id=1,
            deal_id=1,
            file_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}",
            method="DELETE",
            params={
                "archive": archive,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def download(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[bytes]:
        """
        Download a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Yields
        ------
        typing.Iterator[bytes]
            Successful Response
        """
        with self._client_wrapper.httpx_client.stream(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}/download",
            method="GET",
            request_options=request_options,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:
                    _chunk_size = (
                        request_options.get("chunk_size", None)
                        if request_options is not None
                        else None
                    )
                    for _chunk in _response.iter_bytes(chunk_size=_chunk_size):
                        yield _chunk
                    return
                _response.read()
                if _response.status_code == 422:
                    raise UnprocessableEntityError(
                        typing.cast(
                            HttpValidationError,
                            parse_obj_as(
                                type_=HttpValidationError,  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    def read_url(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        content_type: typing.Optional[str] = None,
        download: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GcsSignedUrlResponse:
        """
        Get a signed URL to read a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        content_type : typing.Optional[str]

        download : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GcsSignedUrlResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.read_url(
            group_id=1,
            deal_id=1,
            file_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}/signed-url",
            method="GET",
            params={
                "content_type": content_type,
                "download": download,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GcsSignedUrlResponse,
                    parse_obj_as(
                        type_=GcsSignedUrlResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncFileClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def upload(
        self,
        group_id: int,
        deal_id: int,
        *,
        file: str,
        name: str,
        type: FileType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateFileResponse:
        """
        Parameters
        ----------
        group_id : int

        deal_id : int

        file : str
            The file to upload

        name : str
            Name of the file including extension

        type : FileType
            Type/category of the file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateFileResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file.upload(
                group_id=1,
                deal_id=1,
                file="document.pdf",
                name="contract.pdf",
                type="deck",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file",
            method="POST",
            json={
                "file": file,
                "name": name,
                "type": type,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateFileResponse,
                    parse_obj_as(
                        type_=CreateFileResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_file_entry(
        self,
        group_id: int,
        deal_id: int,
        *,
        name: str,
        type: typing.Optional[FileType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateFileForSignedUrlResponse:
        """
        Create a new file entry for a specific group and deal. Requires the contents to be uploaded separately via signed-url.

        Parameters
        ----------
        group_id : int

        deal_id : int

        name : str
            The human-readable name of the file

        type : typing.Optional[FileType]
            The type of the file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateFileForSignedUrlResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file.create_file_entry(
                group_id=1,
                deal_id=1,
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/entry",
            method="POST",
            json={
                "name": name,
                "type": type,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateFileForSignedUrlResponse,
                    parse_obj_as(
                        type_=CreateFileForSignedUrlResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self,
        group_id: int,
        deal_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListFilesResponse:
        """
        Get all files for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListFilesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file.list(
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/all",
            method="GET",
            params={
                "sort_by": sort_by,
                "sort_order": sort_order,
                "page": page,
                "page_size": page_size,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListFilesResponse,
                    parse_obj_as(
                        type_=ListFilesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Get a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file.get(
                group_id=1,
                deal_id=1,
                file_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FileResponse,
                    parse_obj_as(
                        type_=FileResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        type: typing.Optional[FileType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Update a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        type : typing.Optional[FileType]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file.update(
                group_id=1,
                deal_id=1,
                file_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}",
            method="PUT",
            json={
                "type": type,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FileResponse,
                    parse_obj_as(
                        type_=FileResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file.delete(
                group_id=1,
                deal_id=1,
                file_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}",
            method="DELETE",
            params={
                "archive": archive,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def download(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[bytes]:
        """
        Download a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Yields
        ------
        typing.AsyncIterator[bytes]
            Successful Response
        """
        async with self._client_wrapper.httpx_client.stream(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}/download",
            method="GET",
            request_options=request_options,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:
                    _chunk_size = (
                        request_options.get("chunk_size", None)
                        if request_options is not None
                        else None
                    )
                    async for _chunk in _response.aiter_bytes(chunk_size=_chunk_size):
                        yield _chunk
                    return
                await _response.aread()
                if _response.status_code == 422:
                    raise UnprocessableEntityError(
                        typing.cast(
                            HttpValidationError,
                            parse_obj_as(
                                type_=HttpValidationError,  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    async def read_url(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        content_type: typing.Optional[str] = None,
        download: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GcsSignedUrlResponse:
        """
        Get a signed URL to read a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        content_type : typing.Optional[str]

        download : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GcsSignedUrlResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file.read_url(
                group_id=1,
                deal_id=1,
                file_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}/signed-url",
            method="GET",
            params={
                "content_type": content_type,
                "download": download,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GcsSignedUrlResponse,
                    parse_obj_as(
                        type_=GcsSignedUrlResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.json_value import JsonValue
from ..core.request_options import RequestOptions
from ..types.pending_thread_message_response import PendingThreadMessageResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.thread_message_response import ThreadMessageResponse
from ..types.paginated_response_thread_message_response import (
    PaginatedResponseThreadMessageResponse,
)
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MessageClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def send(
        self,
        group_id: int,
        thread_id: int,
        *,
        content: typing.Optional[str] = OMIT,
        extra: typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PendingThreadMessageResponse:
        """
        Create a message in a thread with the following logic:
        1. Save the user message
        2. Queue Snowman call to get an assistant response as a background task
        3. Return the saved user message

        Parameters
        ----------
        group_id : int

        thread_id : int

        content : typing.Optional[str]
            The content of the thread message

        extra : typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]]
            Extra metadata for the thread message

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PendingThreadMessageResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.message.send(
            group_id=1,
            thread_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/thread/{jsonable_encoder(thread_id)}/message",
            method="POST",
            json={
                "content": content,
                "extra": extra,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PendingThreadMessageResponse,
                    parse_obj_as(
                        type_=PendingThreadMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retry_assistant(
        self,
        group_id: int,
        thread_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PendingThreadMessageResponse:
        """
        Retry getting an assistant response for a specific message:
        1. Get the original user message
        2. Queue a new Snowman call to get an assistant response as a background task
        3. Return the original message details

        Parameters
        ----------
        group_id : int

        thread_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PendingThreadMessageResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.message.retry_assistant(
            group_id=1,
            thread_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/thread/{jsonable_encoder(thread_id)}/message/assistant-retry",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PendingThreadMessageResponse,
                    parse_obj_as(
                        type_=PendingThreadMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def latest(
        self,
        group_id: int,
        thread_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadMessageResponse:
        """
        Get the most recent message from a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadMessageResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.message.latest(
            group_id=1,
            thread_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/thread/{jsonable_encoder(thread_id)}/message/latest",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ThreadMessageResponse,
                    parse_obj_as(
                        type_=ThreadMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self,
        group_id: int,
        thread_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedResponseThreadMessageResponse:
        """
        Get all messages from a thread with pagination.

        Parameters
        ----------
        group_id : int

        thread_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedResponseThreadMessageResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.message.list(
            group_id=1,
            thread_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/thread/{jsonable_encoder(thread_id)}/message/all",
            method="GET",
            params={
                "sort_by": sort_by,
                "sort_order": sort_order,
                "page": page,
                "page_size": page_size,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedResponseThreadMessageResponse,
                    parse_obj_as(
                        type_=PaginatedResponseThreadMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self,
        group_id: int,
        thread_id: int,
        message_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadMessageResponse:
        """
        Get a specific message from a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        message_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadMessageResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.message.get(
            group_id=1,
            thread_id=1,
            message_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/thread/{jsonable_encoder(thread_id)}/message/{jsonable_encoder(message_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ThreadMessageResponse,
                    parse_obj_as(
                        type_=ThreadMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self,
        group_id: int,
        thread_id: int,
        message_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a message from a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        message_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.message.delete(
            group_id=1,
            thread_id=1,
            message_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/thread/{jsonable_encoder(thread_id)}/message/{jsonable_encoder(message_id)}",
            method="DELETE",
            params={
                "archive": archive,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        group_id: int,
        thread_id: int,
        message_id: int,
        *,
        content: typing.Optional[str] = OMIT,
        extra: typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadMessageResponse:
        """
        Update a message in a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        message_id : int

        content : typing.Optional[str]
            The content of the thread message

        extra : typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]]
            Extra metadata for the thread message

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadMessageResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.message.update(
            group_id=1,
            thread_id=1,
            message_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/thread/{jsonable_encoder(thread_id)}/message/{jsonable_encoder(message_id)}",
            method="PATCH",
            json={
                "content": content,
                "extra": extra,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ThreadMessageResponse,
                    parse_obj_as(
                        type_=ThreadMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncMessageClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def send(
        self,
        group_id: int,
        thread_id: int,
        *,
        content: typing.Optional[str] = OMIT,
        extra: typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PendingThreadMessageResponse:
        """
        Create a message in a thread with the following logic:
        1. Save the user message
        2. Queue Snowman call to get an assistant response as a background task
        3. Return the saved user message

        Parameters
        ----------
        group_id : int

        thread_id : int

        content : typing.Optional[str]
            The content of the thread message

        extra : typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]]
            Extra metadata for the thread message

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PendingThreadMessageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.message.send(
                group_id=1,
                thread_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/thread/{jsonable_encoder(thread_id)}/message",
            method="POST",
            json={
                "content": content,
                "extra": extra,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PendingThreadMessageResponse,
                    parse_obj_as(
                        type_=PendingThreadMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retry_assistant(
        self,
        group_id: int,
        thread_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PendingThreadMessageResponse:
        """
        Retry getting an assistant response for a specific message:
        1. Get the original user message
        2. Queue a new Snowman call to get an assistant response as a background task
        3. Return the original message details

        Parameters
        ----------
        group_id : int

        thread_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PendingThreadMessageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.message.retry_assistant(
                group_id=1,
                thread_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/thread/{jsonable_encoder(thread_id)}/message/assistant-retry",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PendingThreadMessageResponse,
                    parse_obj_as(
                        type_=PendingThreadMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def latest(
        self,
        group_id: int,
        thread_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadMessageResponse:
        """
        Get the most recent message from a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadMessageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.message.latest(
                group_id=1,
                thread_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/thread/{jsonable_encoder(thread_id)}/message/latest",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ThreadMessageResponse,
                    parse_obj_as(
                        type_=ThreadMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self,
        group_id: int,
        thread_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedResponseThreadMessageResponse:
        """
        Get all messages from a thread with pagination.

        Parameters
        ----------
        group_id : int

        thread_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedResponseThreadMessageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.message.list(
                group_id=1,
                thread_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/thread/{jsonable_encoder(thread_id)}/message/all",
            method="GET",
            params={
                "sort_by": sort_by,
                "sort_order": sort_order,
                "page": page,
                "page_size": page_size,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedResponseThreadMessageResponse,
                    parse_obj_as(
                        type_=PaginatedResponseThreadMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self,
        group_id: int,
        thread_id: int,
        message_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadMessageResponse:
        """
        Get a specific message from a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        message_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadMessageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.message.get(
                group_id=1,
                thread_id=1,
                message_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/thread/{jsonable_encoder(thread_id)}/message/{jsonable_encoder(message_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ThreadMessageResponse,
                    parse_obj_as(
                        type_=ThreadMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self,
        group_id: int,
        thread_id: int,
        message_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a message from a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        message_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.message.delete(
                group_id=1,
                thread_id=1,
                message_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/thread/{jsonable_encoder(thread_id)}/message/{jsonable_encoder(message_id)}",
            method="DELETE",
            params={
                "archive": archive,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        group_id: int,
        thread_id: int,
        message_id: int,
        *,
        content: typing.Optional[str] = OMIT,
        extra: typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadMessageResponse:
        """
        Update a message in a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        message_id : int

        content : typing.Optional[str]
            The content of the thread message

        extra : typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]]
            Extra metadata for the thread message

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadMessageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.message.update(
                group_id=1,
                thread_id=1,
                message_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/thread/{jsonable_encoder(thread_id)}/message/{jsonable_encoder(message_id)}",
            method="PATCH",
            json={
                "content": content,
                "extra": extra,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ThreadMessageResponse,
                    parse_obj_as(
                        type_=ThreadMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

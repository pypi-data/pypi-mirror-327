# This file was auto-generated by Fern from our API Definition.

import typing
from .environment import TerminaEnvironment
import httpx
from .core.client_wrapper import SyncClientWrapper
from .auth.client import AuthClient
from .thread.client import ThreadClient
from .message.client import MessageClient
from .thread_file.client import ThreadFileClient
from .company.client import CompanyClient
from .metadata.client import MetadataClient
from .benchmark.client import BenchmarkClient
from .financials.client import FinancialsClient
from .product.client import ProductClient
from .talent.client import TalentClient
from .unit_economics.client import UnitEconomicsClient
from .macro.client import MacroClient
from .deal.client import DealClient
from .file.client import FileClient
from .group.client import GroupClient
from .user.client import UserClient
from .core.client_wrapper import AsyncClientWrapper
from .auth.client import AsyncAuthClient
from .thread.client import AsyncThreadClient
from .message.client import AsyncMessageClient
from .thread_file.client import AsyncThreadFileClient
from .company.client import AsyncCompanyClient
from .metadata.client import AsyncMetadataClient
from .benchmark.client import AsyncBenchmarkClient
from .financials.client import AsyncFinancialsClient
from .product.client import AsyncProductClient
from .talent.client import AsyncTalentClient
from .unit_economics.client import AsyncUnitEconomicsClient
from .macro.client import AsyncMacroClient
from .deal.client import AsyncDealClient
from .file.client import AsyncFileClient
from .group.client import AsyncGroupClient
from .user.client import AsyncUserClient


class BaseClient:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : TerminaEnvironment
        The environment to use for requests from the client. from .environment import TerminaEnvironment



        Defaults to TerminaEnvironment.DEFAULT



    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from termina import Termina

    client = Termina(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: TerminaEnvironment = TerminaEnvironment.DEFAULT,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.auth = AuthClient(client_wrapper=self._client_wrapper)
        self.thread = ThreadClient(client_wrapper=self._client_wrapper)
        self.message = MessageClient(client_wrapper=self._client_wrapper)
        self.thread_file = ThreadFileClient(client_wrapper=self._client_wrapper)
        self.company = CompanyClient(client_wrapper=self._client_wrapper)
        self.metadata = MetadataClient(client_wrapper=self._client_wrapper)
        self.benchmark = BenchmarkClient(client_wrapper=self._client_wrapper)
        self.financials = FinancialsClient(client_wrapper=self._client_wrapper)
        self.product = ProductClient(client_wrapper=self._client_wrapper)
        self.talent = TalentClient(client_wrapper=self._client_wrapper)
        self.unit_economics = UnitEconomicsClient(client_wrapper=self._client_wrapper)
        self.macro = MacroClient(client_wrapper=self._client_wrapper)
        self.deal = DealClient(client_wrapper=self._client_wrapper)
        self.file = FileClient(client_wrapper=self._client_wrapper)
        self.group = GroupClient(client_wrapper=self._client_wrapper)
        self.user = UserClient(client_wrapper=self._client_wrapper)


class AsyncBaseClient:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : TerminaEnvironment
        The environment to use for requests from the client. from .environment import TerminaEnvironment



        Defaults to TerminaEnvironment.DEFAULT



    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from termina import AsyncTermina

    client = AsyncTermina(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: TerminaEnvironment = TerminaEnvironment.DEFAULT,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.auth = AsyncAuthClient(client_wrapper=self._client_wrapper)
        self.thread = AsyncThreadClient(client_wrapper=self._client_wrapper)
        self.message = AsyncMessageClient(client_wrapper=self._client_wrapper)
        self.thread_file = AsyncThreadFileClient(client_wrapper=self._client_wrapper)
        self.company = AsyncCompanyClient(client_wrapper=self._client_wrapper)
        self.metadata = AsyncMetadataClient(client_wrapper=self._client_wrapper)
        self.benchmark = AsyncBenchmarkClient(client_wrapper=self._client_wrapper)
        self.financials = AsyncFinancialsClient(client_wrapper=self._client_wrapper)
        self.product = AsyncProductClient(client_wrapper=self._client_wrapper)
        self.talent = AsyncTalentClient(client_wrapper=self._client_wrapper)
        self.unit_economics = AsyncUnitEconomicsClient(client_wrapper=self._client_wrapper)
        self.macro = AsyncMacroClient(client_wrapper=self._client_wrapper)
        self.deal = AsyncDealClient(client_wrapper=self._client_wrapper)
        self.file = AsyncFileClient(client_wrapper=self._client_wrapper)
        self.group = AsyncGroupClient(client_wrapper=self._client_wrapper)
        self.user = AsyncUserClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: TerminaEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
